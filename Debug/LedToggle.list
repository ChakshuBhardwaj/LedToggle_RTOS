
LedToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006514  08006514  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800651c  0800651c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0001348c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200134a0  200134a0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141e3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce8  00000000  00000000  00034227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00036f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  000381d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e15  00000000  00000000  00039328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014674  00000000  00000000  0005d13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e70c4  00000000  00000000  000717b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158875  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ed8  00000000  00000000  001588c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006440 	.word	0x08006440

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08006440 	.word	0x08006440

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e7c 	.word	0x20012e7c

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f103 0208 	add.w	r2, r3, #8
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f04f 32ff 	mov.w	r2, #4294967295
 80005a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f103 0208 	add.w	r2, r3, #8
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f103 0208 	add.w	r2, r3, #8
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005e2:	b480      	push	{r7}
 80005e4:	b085      	sub	sp, #20
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d103      	bne.n	800064a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e00c      	b.n	8000664 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3308      	adds	r3, #8
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e002      	b.n	8000658 <vListInsert+0x2e>
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	429a      	cmp	r2, r3
 8000662:	d2f6      	bcs.n	8000652 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	6892      	ldr	r2, [r2, #8]
 80006b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	6852      	ldr	r2, [r2, #4]
 80006bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d103      	bne.n	80006d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10a      	bne.n	800071a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000716:	bf00      	nop
 8000718:	e7fe      	b.n	8000718 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800071a:	f002 f933 	bl	8002984 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000726:	68f9      	ldr	r1, [r7, #12]
 8000728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800072a:	fb01 f303 	mul.w	r3, r1, r3
 800072e:	441a      	add	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800074a:	3b01      	subs	r3, #1
 800074c:	68f9      	ldr	r1, [r7, #12]
 800074e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	441a      	add	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	22ff      	movs	r2, #255	; 0xff
 8000766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d114      	bne.n	800079a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d01a      	beq.n	80007ae <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3310      	adds	r3, #16
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f98f 	bl	8001aa0 <xTaskRemoveFromEventList>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d012      	beq.n	80007ae <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <xQueueGenericReset+0xcc>)
 800078a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	f3bf 8f6f 	isb	sy
 8000798:	e009      	b.n	80007ae <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3310      	adds	r3, #16
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fef2 	bl	8000588 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3324      	adds	r3, #36	; 0x24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff feed 	bl	8000588 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007ae:	f002 f919 	bl	80029e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	e000ed04 	.word	0xe000ed04

080007c0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10a      	bne.n	80007ea <xQueueGenericCreate+0x2a>
        __asm volatile
 80007d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d8:	f383 8811 	msr	BASEPRI, r3
 80007dc:	f3bf 8f6f 	isb	sy
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	61bb      	str	r3, [r7, #24]
    }
 80007e6:	bf00      	nop
 80007e8:	e7fe      	b.n	80007e8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <xQueueGenericCreate+0x48>
 80007fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	429a      	cmp	r2, r3
 8000806:	d101      	bne.n	800080c <xQueueGenericCreate+0x4c>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <xQueueGenericCreate+0x4e>
 800080c:	2300      	movs	r3, #0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10a      	bne.n	8000828 <xQueueGenericCreate+0x68>
        __asm volatile
 8000812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000816:	f383 8811 	msr	BASEPRI, r3
 800081a:	f3bf 8f6f 	isb	sy
 800081e:	f3bf 8f4f 	dsb	sy
 8000822:	617b      	str	r3, [r7, #20]
    }
 8000824:	bf00      	nop
 8000826:	e7fe      	b.n	8000826 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800082e:	d90a      	bls.n	8000846 <xQueueGenericCreate+0x86>
        __asm volatile
 8000830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	f3bf 8f6f 	isb	sy
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	613b      	str	r3, [r7, #16]
    }
 8000842:	bf00      	nop
 8000844:	e7fe      	b.n	8000844 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3350      	adds	r3, #80	; 0x50
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f9c6 	bl	8002bdc <pvPortMalloc>
 8000850:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000852:	6a3b      	ldr	r3, [r7, #32]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00d      	beq.n	8000874 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	3350      	adds	r3, #80	; 0x50
 8000860:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4613      	mov	r3, r2
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f000 f805 	bl	800087e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000874:	6a3b      	ldr	r3, [r7, #32]
    }
 8000876:	4618      	mov	r0, r3
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e002      	b.n	80008a0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008ac:	2101      	movs	r1, #1
 80008ae:	69b8      	ldr	r0, [r7, #24]
 80008b0:	f7ff ff1e 	bl	80006f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	78fa      	ldrb	r2, [r7, #3]
 80008b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	2073      	movs	r0, #115	; 0x73
 80008c4:	f002 ffc8 	bl	8003858 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b090      	sub	sp, #64	; 0x40
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10a      	bne.n	8000902 <xQueueGenericSend+0x32>
        __asm volatile
 80008ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008fe:	bf00      	nop
 8000900:	e7fe      	b.n	8000900 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <xQueueGenericSend+0x40>
 8000908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <xQueueGenericSend+0x44>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <xQueueGenericSend+0x46>
 8000914:	2300      	movs	r3, #0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <xQueueGenericSend+0x60>
        __asm volatile
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800092c:	bf00      	nop
 800092e:	e7fe      	b.n	800092e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <xQueueGenericSend+0x6e>
 8000936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <xQueueGenericSend+0x72>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <xQueueGenericSend+0x74>
 8000942:	2300      	movs	r3, #0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10a      	bne.n	800095e <xQueueGenericSend+0x8e>
        __asm volatile
 8000948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800094c:	f383 8811 	msr	BASEPRI, r3
 8000950:	f3bf 8f6f 	isb	sy
 8000954:	f3bf 8f4f 	dsb	sy
 8000958:	623b      	str	r3, [r7, #32]
    }
 800095a:	bf00      	nop
 800095c:	e7fe      	b.n	800095c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800095e:	f001 fa3f 	bl	8001de0 <xTaskGetSchedulerState>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <xQueueGenericSend+0x9e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <xQueueGenericSend+0xa2>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <xQueueGenericSend+0xa4>
 8000972:	2300      	movs	r3, #0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10a      	bne.n	800098e <xQueueGenericSend+0xbe>
        __asm volatile
 8000978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800097c:	f383 8811 	msr	BASEPRI, r3
 8000980:	f3bf 8f6f 	isb	sy
 8000984:	f3bf 8f4f 	dsb	sy
 8000988:	61fb      	str	r3, [r7, #28]
    }
 800098a:	bf00      	nop
 800098c:	e7fe      	b.n	800098c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800098e:	f001 fff9 	bl	8002984 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	429a      	cmp	r2, r3
 800099c:	d302      	bcc.n	80009a4 <xQueueGenericSend+0xd4>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d136      	bne.n	8000a12 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80009a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fcbe 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	460b      	mov	r3, r1
 80009b6:	4601      	mov	r1, r0
 80009b8:	205a      	movs	r0, #90	; 0x5a
 80009ba:	f002 ffc3 	bl	8003944 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009c4:	f000 fa78 	bl	8000eb8 <prvCopyDataToQueue>
 80009c8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d010      	beq.n	80009f4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d4:	3324      	adds	r3, #36	; 0x24
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f862 	bl	8001aa0 <xTaskRemoveFromEventList>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d013      	beq.n	8000a0a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <xQueueGenericSend+0x248>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	e00a      	b.n	8000a0a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d007      	beq.n	8000a0a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009fa:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <xQueueGenericSend+0x248>)
 80009fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	f3bf 8f4f 	dsb	sy
 8000a06:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a0a:	f001 ffeb 	bl	80029e4 <vPortExitCritical>
                return pdPASS;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e07d      	b.n	8000b0e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d110      	bne.n	8000a3a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a18:	f001 ffe4 	bl	80029e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fc82 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	4601      	mov	r1, r0
 8000a30:	205a      	movs	r0, #90	; 0x5a
 8000a32:	f002 ff87 	bl	8003944 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e069      	b.n	8000b0e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d106      	bne.n	8000a4e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f891 	bl	8001b6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a4e:	f001 ffc9 	bl	80029e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a52:	f000 fdef 	bl	8001634 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a56:	f001 ff95 	bl	8002984 <vPortEnterCritical>
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a66:	d103      	bne.n	8000a70 <xQueueGenericSend+0x1a0>
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d103      	bne.n	8000a86 <xQueueGenericSend+0x1b6>
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a86:	f001 ffad 	bl	80029e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a8a:	1d3a      	adds	r2, r7, #4
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f880 	bl	8001b98 <xTaskCheckForTimeOut>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d124      	bne.n	8000ae8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aa0:	f000 fb02 	bl	80010a8 <prvIsQueueFull>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d018      	beq.n	8000adc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aac:	3310      	adds	r3, #16
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ffa2 	bl	80019fc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aba:	f000 fa8d 	bl	8000fd8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000abe:	f000 fdc7 	bl	8001650 <xTaskResumeAll>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f47f af62 	bne.w	800098e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <xQueueGenericSend+0x248>)
 8000acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	f3bf 8f4f 	dsb	sy
 8000ad6:	f3bf 8f6f 	isb	sy
 8000ada:	e758      	b.n	800098e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ade:	f000 fa7b 	bl	8000fd8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ae2:	f000 fdb5 	bl	8001650 <xTaskResumeAll>
 8000ae6:	e752      	b.n	800098e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aea:	f000 fa75 	bl	8000fd8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aee:	f000 fdaf 	bl	8001650 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fc17 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	460b      	mov	r3, r1
 8000b04:	4601      	mov	r1, r0
 8000b06:	205a      	movs	r0, #90	; 0x5a
 8000b08:	f002 ff1c 	bl	8003944 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000b0c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3738      	adds	r7, #56	; 0x38
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000ed04 	.word	0xe000ed04

08000b1c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10a      	bne.n	8000b4a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b38:	f383 8811 	msr	BASEPRI, r3
 8000b3c:	f3bf 8f6f 	isb	sy
 8000b40:	f3bf 8f4f 	dsb	sy
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b46:	bf00      	nop
 8000b48:	e7fe      	b.n	8000b48 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <xQueueGenericSendFromISR+0x3c>
 8000b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <xQueueGenericSendFromISR+0x40>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <xQueueGenericSendFromISR+0x42>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10a      	bne.n	8000b78 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b66:	f383 8811 	msr	BASEPRI, r3
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b74:	bf00      	nop
 8000b76:	e7fe      	b.n	8000b76 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d103      	bne.n	8000b86 <xQueueGenericSendFromISR+0x6a>
 8000b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d101      	bne.n	8000b8a <xQueueGenericSendFromISR+0x6e>
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <xQueueGenericSendFromISR+0x70>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10a      	bne.n	8000ba6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b94:	f383 8811 	msr	BASEPRI, r3
 8000b98:	f3bf 8f6f 	isb	sy
 8000b9c:	f3bf 8f4f 	dsb	sy
 8000ba0:	623b      	str	r3, [r7, #32]
    }
 8000ba2:	bf00      	nop
 8000ba4:	e7fe      	b.n	8000ba4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ba6:	f001 ffd9 	bl	8002b5c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000baa:	f3ef 8211 	mrs	r2, BASEPRI
 8000bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb2:	f383 8811 	msr	BASEPRI, r3
 8000bb6:	f3bf 8f6f 	isb	sy
 8000bba:	f3bf 8f4f 	dsb	sy
 8000bbe:	61fa      	str	r2, [r7, #28]
 8000bc0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d302      	bcc.n	8000bd8 <xQueueGenericSendFromISR+0xbc>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d148      	bne.n	8000c6a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fb9c 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2060      	movs	r0, #96	; 0x60
 8000bf8:	f002 fdd4 	bl	80037a4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c02:	f000 f959 	bl	8000eb8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000c06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0e:	d112      	bne.n	8000c36 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d025      	beq.n	8000c64 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c1a:	3324      	adds	r3, #36	; 0x24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 ff3f 	bl	8001aa0 <xTaskRemoveFromEventList>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d01d      	beq.n	8000c64 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d01a      	beq.n	8000c64 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e016      	b.n	8000c64 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000c36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c3c:	d10a      	bne.n	8000c54 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c42:	f383 8811 	msr	BASEPRI, r3
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	617b      	str	r3, [r7, #20]
    }
 8000c50:	bf00      	nop
 8000c52:	e7fe      	b.n	8000c52 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	b25a      	sxtb	r2, r3
 8000c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c64:	2301      	movs	r3, #1
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c68:	e00b      	b.n	8000c82 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fb5b 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000c72:	4601      	mov	r1, r0
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	461a      	mov	r2, r3
 8000c78:	2060      	movs	r0, #96	; 0x60
 8000c7a:	f002 fd93 	bl	80037a4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c84:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c8c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3740      	adds	r7, #64	; 0x40
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b08f      	sub	sp, #60	; 0x3c
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10a      	bne.n	8000cc8 <xQueueReceive+0x30>
        __asm volatile
 8000cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb6:	f383 8811 	msr	BASEPRI, r3
 8000cba:	f3bf 8f6f 	isb	sy
 8000cbe:	f3bf 8f4f 	dsb	sy
 8000cc2:	623b      	str	r3, [r7, #32]
    }
 8000cc4:	bf00      	nop
 8000cc6:	e7fe      	b.n	8000cc6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <xQueueReceive+0x3e>
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <xQueueReceive+0x42>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <xQueueReceive+0x44>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10a      	bne.n	8000cf6 <xQueueReceive+0x5e>
        __asm volatile
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	f383 8811 	msr	BASEPRI, r3
 8000ce8:	f3bf 8f6f 	isb	sy
 8000cec:	f3bf 8f4f 	dsb	sy
 8000cf0:	61fb      	str	r3, [r7, #28]
    }
 8000cf2:	bf00      	nop
 8000cf4:	e7fe      	b.n	8000cf4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cf6:	f001 f873 	bl	8001de0 <xTaskGetSchedulerState>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <xQueueReceive+0x6e>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <xQueueReceive+0x72>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <xQueueReceive+0x74>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10a      	bne.n	8000d26 <xQueueReceive+0x8e>
        __asm volatile
 8000d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d14:	f383 8811 	msr	BASEPRI, r3
 8000d18:	f3bf 8f6f 	isb	sy
 8000d1c:	f3bf 8f4f 	dsb	sy
 8000d20:	61bb      	str	r3, [r7, #24]
    }
 8000d22:	bf00      	nop
 8000d24:	e7fe      	b.n	8000d24 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d26:	f001 fe2d 	bl	8002984 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d02f      	beq.n	8000d96 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d3a:	f000 f927 	bl	8000f8c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 faf1 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000d46:	4604      	mov	r4, r0
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f003 faed 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2101      	movs	r1, #1
 8000d54:	9100      	str	r1, [sp, #0]
 8000d56:	4621      	mov	r1, r4
 8000d58:	205c      	movs	r0, #92	; 0x5c
 8000d5a:	f002 fdf3 	bl	8003944 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00f      	beq.n	8000d8e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	3310      	adds	r3, #16
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fe94 	bl	8001aa0 <xTaskRemoveFromEventList>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d7e:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <xQueueReceive+0x21c>)
 8000d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	f3bf 8f4f 	dsb	sy
 8000d8a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d8e:	f001 fe29 	bl	80029e4 <vPortExitCritical>
                return pdPASS;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e08a      	b.n	8000eac <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d113      	bne.n	8000dc4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d9c:	f001 fe22 	bl	80029e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fac0 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000da8:	4604      	mov	r4, r0
 8000daa:	2000      	movs	r0, #0
 8000dac:	f003 fabc 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000db0:	4602      	mov	r2, r0
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2101      	movs	r1, #1
 8000db6:	9100      	str	r1, [sp, #0]
 8000db8:	4621      	mov	r1, r4
 8000dba:	205c      	movs	r0, #92	; 0x5c
 8000dbc:	f002 fdc2 	bl	8003944 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e073      	b.n	8000eac <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d106      	bne.n	8000dd8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fecc 	bl	8001b6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000dd8:	f001 fe04 	bl	80029e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ddc:	f000 fc2a 	bl	8001634 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000de0:	f001 fdd0 	bl	8002984 <vPortEnterCritical>
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d103      	bne.n	8000dfa <xQueueReceive+0x162>
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueReceive+0x178>
 8000e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e10:	f001 fde8 	bl	80029e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e14:	1d3a      	adds	r2, r7, #4
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 febb 	bl	8001b98 <xTaskCheckForTimeOut>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d124      	bne.n	8000e72 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e2a:	f000 f927 	bl	800107c <prvIsQueueEmpty>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d018      	beq.n	8000e66 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	3324      	adds	r3, #36	; 0x24
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fddd 	bl	80019fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e44:	f000 f8c8 	bl	8000fd8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e48:	f000 fc02 	bl	8001650 <xTaskResumeAll>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f47f af69 	bne.w	8000d26 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <xQueueReceive+0x21c>)
 8000e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	f3bf 8f4f 	dsb	sy
 8000e60:	f3bf 8f6f 	isb	sy
 8000e64:	e75f      	b.n	8000d26 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e68:	f000 f8b6 	bl	8000fd8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e6c:	f000 fbf0 	bl	8001650 <xTaskResumeAll>
 8000e70:	e759      	b.n	8000d26 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e74:	f000 f8b0 	bl	8000fd8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e78:	f000 fbea 	bl	8001650 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e7e:	f000 f8fd 	bl	800107c <prvIsQueueEmpty>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f43f af4e 	beq.w	8000d26 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fa4b 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000e92:	4604      	mov	r4, r0
 8000e94:	2000      	movs	r0, #0
 8000e96:	f003 fa47 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	9100      	str	r1, [sp, #0]
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	205c      	movs	r0, #92	; 0x5c
 8000ea6:	f002 fd4d 	bl	8003944 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000eaa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3734      	adds	r7, #52	; 0x34
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	e000ed04 	.word	0xe000ed04

08000eb8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ecc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10d      	bne.n	8000ef2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d14d      	bne.n	8000f7a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 ff9a 	bl	8001e1c <xTaskPriorityDisinherit>
 8000ee8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	e043      	b.n	8000f7a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d119      	bne.n	8000f2c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6858      	ldr	r0, [r3, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	461a      	mov	r2, r3
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	f005 fa86 	bl	8006414 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	441a      	add	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d32b      	bcc.n	8000f7a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	e026      	b.n	8000f7a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68d8      	ldr	r0, [r3, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	461a      	mov	r2, r3
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	f005 fa6c 	bl	8006414 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	425b      	negs	r3, r3
 8000f46:	441a      	add	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	425b      	negs	r3, r3
 8000f62:	441a      	add	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d105      	bne.n	8000f7a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f82:	697b      	ldr	r3, [r7, #20]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d018      	beq.n	8000fd0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	441a      	add	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d303      	bcc.n	8000fc0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68d9      	ldr	r1, [r3, #12]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	461a      	mov	r2, r3
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f005 fa22 	bl	8006414 <memcpy>
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fe0:	f001 fcd0 	bl	8002984 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fec:	e011      	b.n	8001012 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d012      	beq.n	800101c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3324      	adds	r3, #36	; 0x24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fd50 	bl	8001aa0 <xTaskRemoveFromEventList>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001006:	f000 fe2d 	bl	8001c64 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3b01      	subs	r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dce9      	bgt.n	8000fee <prvUnlockQueue+0x16>
 800101a:	e000      	b.n	800101e <prvUnlockQueue+0x46>
                        break;
 800101c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001026:	f001 fcdd 	bl	80029e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800102a:	f001 fcab 	bl	8002984 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001034:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001036:	e011      	b.n	800105c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3310      	adds	r3, #16
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fd2b 	bl	8001aa0 <xTaskRemoveFromEventList>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001050:	f000 fe08 	bl	8001c64 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	3b01      	subs	r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800105c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001060:	2b00      	cmp	r3, #0
 8001062:	dce9      	bgt.n	8001038 <prvUnlockQueue+0x60>
 8001064:	e000      	b.n	8001068 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001066:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001070:	f001 fcb8 	bl	80029e4 <vPortExitCritical>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001084:	f001 fc7e 	bl	8002984 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e001      	b.n	800109a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800109a:	f001 fca3 	bl	80029e4 <vPortExitCritical>

    return xReturn;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010b0:	f001 fc68 	bl	8002984 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010bc:	429a      	cmp	r2, r3
 80010be:	d102      	bne.n	80010c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e001      	b.n	80010ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010ca:	f001 fc8b 	bl	80029e4 <vPortExitCritical>

    return xReturn;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e01e      	b.n	8001126 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <vQueueAddToRegistry+0x60>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d115      	bne.n	8001120 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80010f4:	4910      	ldr	r1, [pc, #64]	; (8001138 <vQueueAddToRegistry+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <vQueueAddToRegistry+0x60>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	f003 f90b 	bl	8004328 <SEGGER_SYSVIEW_ShrinkId>
 8001112:	4601      	mov	r1, r0
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	2071      	movs	r0, #113	; 0x71
 800111a:	f002 fb43 	bl	80037a4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800111e:	e006      	b.n	800112e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b07      	cmp	r3, #7
 800112a:	d9dd      	bls.n	80010e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000030 	.word	0x20000030

0800113c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800114c:	f001 fc1a 	bl	8002984 <vPortEnterCritical>
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001156:	b25b      	sxtb	r3, r3
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d103      	bne.n	8001166 <vQueueWaitForMessageRestricted+0x2a>
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800116c:	b25b      	sxtb	r3, r3
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001172:	d103      	bne.n	800117c <vQueueWaitForMessageRestricted+0x40>
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800117c:	f001 fc32 	bl	80029e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fc57 	bl	8001a44 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff1e 	bl	8000fd8 <prvUnlockQueue>
    }
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fd0f 	bl	8002bdc <pvPortMalloc>
 80011be:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00e      	beq.n	80011e4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011c6:	2058      	movs	r0, #88	; 0x58
 80011c8:	f001 fd08 	bl	8002bdc <pvPortMalloc>
 80011cc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
 80011da:	e005      	b.n	80011e8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80011dc:	6978      	ldr	r0, [r7, #20]
 80011de:	f001 fddd 	bl	8002d9c <vPortFree>
 80011e2:	e001      	b.n	80011e8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d013      	beq.n	8001216 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9303      	str	r3, [sp, #12]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f80e 	bl	8001226 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f000 f8a2 	bl	8001354 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e002      	b.n	800121c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800121c:	69bb      	ldr	r3, [r7, #24]
    }
 800121e:	4618      	mov	r0, r3
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b088      	sub	sp, #32
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	461a      	mov	r2, r3
 800123e:	21a5      	movs	r1, #165	; 0xa5
 8001240:	f005 f8f6 	bl	8006430 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800124e:	3b01      	subs	r3, #1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f023 0307 	bic.w	r3, r3, #7
 800125c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00a      	beq.n	800127e <prvInitialiseNewTask+0x58>
        __asm volatile
 8001268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	617b      	str	r3, [r7, #20]
    }
 800127a:	bf00      	nop
 800127c:	e7fe      	b.n	800127c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01f      	beq.n	80012c4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	e012      	b.n	80012b0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	7819      	ldrb	r1, [r3, #0]
 8001292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	4413      	add	r3, r2
 8001298:	3334      	adds	r3, #52	; 0x34
 800129a:	460a      	mov	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b09      	cmp	r3, #9
 80012b4:	d9e9      	bls.n	800128a <prvInitialiseNewTask+0x64>
 80012b6:	e000      	b.n	80012ba <prvInitialiseNewTask+0x94>
            {
                break;
 80012b8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012c2:	e003      	b.n	80012cc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d901      	bls.n	80012d6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012d2:	2304      	movs	r3, #4
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012e0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	2200      	movs	r2, #0
 80012e6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	3304      	adds	r3, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f96b 	bl	80005c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f4:	3318      	adds	r3, #24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f966 	bl	80005c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001300:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	f1c3 0205 	rsb	r2, r3, #5
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	3350      	adds	r3, #80	; 0x50
 8001316:	2204      	movs	r2, #4
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f005 f888 	bl	8006430 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	3354      	adds	r3, #84	; 0x54
 8001324:	2201      	movs	r2, #1
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f005 f881 	bl	8006430 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	69b8      	ldr	r0, [r7, #24]
 8001334:	f001 f97c 	bl	8002630 <pxPortInitialiseStack>
 8001338:	4602      	mov	r2, r0
 800133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001348:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af02      	add	r7, sp, #8
 800135a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800135c:	f001 fb12 	bl	8002984 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <prvAddNewTaskToReadyList+0xfc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <prvAddNewTaskToReadyList+0xfc>)
 8001368:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001372:	4a38      	ldr	r2, [pc, #224]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <prvAddNewTaskToReadyList+0xfc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d110      	bne.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001380:	f000 fc94 	bl	8001cac <prvInitialiseTaskLists>
 8001384:	e00d      	b.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <prvAddNewTaskToReadyList+0x104>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	429a      	cmp	r2, r3
 800139a:	d802      	bhi.n	80013a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800139c:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <prvAddNewTaskToReadyList+0x108>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a2c      	ldr	r2, [pc, #176]	; (800145c <prvAddNewTaskToReadyList+0x108>)
 80013aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <prvAddNewTaskToReadyList+0x108>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d016      	beq.n	80013e8 <prvAddNewTaskToReadyList+0x94>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fe8d 	bl	80040dc <SEGGER_SYSVIEW_OnTaskCreate>
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	461d      	mov	r5, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	461c      	mov	r4, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	1ae3      	subs	r3, r4, r3
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	462b      	mov	r3, r5
 80013e4:	f001 fdf8 	bl	8002fd8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fefa 	bl	80041e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2201      	movs	r2, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <prvAddNewTaskToReadyList+0x10c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <prvAddNewTaskToReadyList+0x10c>)
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <prvAddNewTaskToReadyList+0x110>)
 8001410:	441a      	add	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff f8e2 	bl	80005e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800141e:	f001 fae1 	bl	80029e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <prvAddNewTaskToReadyList+0x104>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00e      	beq.n	8001448 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <prvAddNewTaskToReadyList+0x100>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <prvAddNewTaskToReadyList+0x114>)
 800143a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}
 8001450:	20000148 	.word	0x20000148
 8001454:	20000070 	.word	0x20000070
 8001458:	20000154 	.word	0x20000154
 800145c:	20000164 	.word	0x20000164
 8001460:	20000150 	.word	0x20000150
 8001464:	20000074 	.word	0x20000074
 8001468:	e000ed04 	.word	0xe000ed04

0800146c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10a      	bne.n	8001496 <xTaskDelayUntil+0x2a>
        __asm volatile
 8001480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001484:	f383 8811 	msr	BASEPRI, r3
 8001488:	f3bf 8f6f 	isb	sy
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	617b      	str	r3, [r7, #20]
    }
 8001492:	bf00      	nop
 8001494:	e7fe      	b.n	8001494 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10a      	bne.n	80014b2 <xTaskDelayUntil+0x46>
        __asm volatile
 800149c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a0:	f383 8811 	msr	BASEPRI, r3
 80014a4:	f3bf 8f6f 	isb	sy
 80014a8:	f3bf 8f4f 	dsb	sy
 80014ac:	613b      	str	r3, [r7, #16]
    }
 80014ae:	bf00      	nop
 80014b0:	e7fe      	b.n	80014b0 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <xTaskDelayUntil+0xf8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00a      	beq.n	80014d0 <xTaskDelayUntil+0x64>
        __asm volatile
 80014ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	60fb      	str	r3, [r7, #12]
    }
 80014cc:	bf00      	nop
 80014ce:	e7fe      	b.n	80014ce <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80014d0:	f000 f8b0 	bl	8001634 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <xTaskDelayUntil+0xfc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a3a      	ldr	r2, [r7, #32]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d20b      	bcs.n	8001506 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d211      	bcs.n	800151c <xTaskDelayUntil+0xb0>
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d90d      	bls.n	800151c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
 8001504:	e00a      	b.n	800151c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	429a      	cmp	r2, r3
 800150e:	d303      	bcc.n	8001518 <xTaskDelayUntil+0xac>
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	429a      	cmp	r2, r3
 8001516:	d901      	bls.n	800151c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8001518:	2301      	movs	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8001528:	2024      	movs	r0, #36	; 0x24
 800152a:	f002 f8e1 	bl	80036f0 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fcf0 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800153c:	f000 f888 	bl	8001650 <xTaskResumeAll>
 8001540:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <xTaskDelayUntil+0x100>)
 800154a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f3bf 8f4f 	dsb	sy
 8001554:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800155a:	4618      	mov	r0, r3
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000170 	.word	0x20000170
 8001568:	2000014c 	.word	0x2000014c
 800156c:	e000ed04 	.word	0xe000ed04

08001570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <vTaskStartScheduler+0xa4>)
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2300      	movs	r3, #0
 8001580:	2282      	movs	r2, #130	; 0x82
 8001582:	4925      	ldr	r1, [pc, #148]	; (8001618 <vTaskStartScheduler+0xa8>)
 8001584:	4825      	ldr	r0, [pc, #148]	; (800161c <vTaskStartScheduler+0xac>)
 8001586:	f7ff fe0d 	bl	80011a4 <xTaskCreate>
 800158a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d102      	bne.n	8001598 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001592:	f000 fd3b 	bl	800200c <xTimerCreateTimerTask>
 8001596:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d124      	bne.n	80015e8 <vTaskStartScheduler+0x78>
        __asm volatile
 800159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a2:	f383 8811 	msr	BASEPRI, r3
 80015a6:	f3bf 8f6f 	isb	sy
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	60bb      	str	r3, [r7, #8]
    }
 80015b0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <vTaskStartScheduler+0xb0>)
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <vTaskStartScheduler+0xb4>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <vTaskStartScheduler+0xb8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <vTaskStartScheduler+0xbc>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <vTaskStartScheduler+0xa4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d102      	bne.n	80015d8 <vTaskStartScheduler+0x68>
 80015d2:	f002 fd67 	bl	80040a4 <SEGGER_SYSVIEW_OnIdle>
 80015d6:	e004      	b.n	80015e2 <vTaskStartScheduler+0x72>
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <vTaskStartScheduler+0xbc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 fdbf 	bl	8004160 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80015e2:	f001 f8af 	bl	8002744 <xPortStartScheduler>
 80015e6:	e00e      	b.n	8001606 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ee:	d10a      	bne.n	8001606 <vTaskStartScheduler+0x96>
        __asm volatile
 80015f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f4:	f383 8811 	msr	BASEPRI, r3
 80015f8:	f3bf 8f6f 	isb	sy
 80015fc:	f3bf 8f4f 	dsb	sy
 8001600:	607b      	str	r3, [r7, #4]
    }
 8001602:	bf00      	nop
 8001604:	e7fe      	b.n	8001604 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <vTaskStartScheduler+0xc0>)
 8001608:	681b      	ldr	r3, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000016c 	.word	0x2000016c
 8001618:	08006458 	.word	0x08006458
 800161c:	08001c7d 	.word	0x08001c7d
 8001620:	20000168 	.word	0x20000168
 8001624:	20000154 	.word	0x20000154
 8001628:	2000014c 	.word	0x2000014c
 800162c:	20000070 	.word	0x20000070
 8001630:	20000000 	.word	0x20000000

08001634 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <vTaskSuspendAll+0x18>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a03      	ldr	r2, [pc, #12]	; (800164c <vTaskSuspendAll+0x18>)
 8001640:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20000170 	.word	0x20000170

08001650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <xTaskResumeAll+0x11c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10a      	bne.n	800167c <xTaskResumeAll+0x2c>
        __asm volatile
 8001666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166a:	f383 8811 	msr	BASEPRI, r3
 800166e:	f3bf 8f6f 	isb	sy
 8001672:	f3bf 8f4f 	dsb	sy
 8001676:	603b      	str	r3, [r7, #0]
    }
 8001678:	bf00      	nop
 800167a:	e7fe      	b.n	800167a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800167c:	f001 f982 	bl	8002984 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001680:	4b3a      	ldr	r3, [pc, #232]	; (800176c <xTaskResumeAll+0x11c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	4a39      	ldr	r2, [pc, #228]	; (800176c <xTaskResumeAll+0x11c>)
 8001688:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <xTaskResumeAll+0x11c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d165      	bne.n	800175e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <xTaskResumeAll+0x120>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d061      	beq.n	800175e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800169a:	e032      	b.n	8001702 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <xTaskResumeAll+0x124>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3318      	adds	r3, #24
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fff7 	bl	800069c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3304      	adds	r3, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fff2 	bl	800069c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fd92 	bl	80041e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2201      	movs	r2, #1
 80016c6:	409a      	lsls	r2, r3
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <xTaskResumeAll+0x128>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <xTaskResumeAll+0x128>)
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <xTaskResumeAll+0x12c>)
 80016e0:	441a      	add	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3304      	adds	r3, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7fe ff7a 	bl	80005e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <xTaskResumeAll+0x130>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d302      	bcc.n	8001702 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <xTaskResumeAll+0x134>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <xTaskResumeAll+0x124>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1c8      	bne.n	800169c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001710:	f000 fb4a 	bl	8001da8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <xTaskResumeAll+0x138>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d010      	beq.n	8001742 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001720:	f000 f846 	bl	80017b0 <xTaskIncrementTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <xTaskResumeAll+0x134>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f1      	bne.n	8001720 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <xTaskResumeAll+0x138>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <xTaskResumeAll+0x134>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800174a:	2301      	movs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <xTaskResumeAll+0x13c>)
 8001750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	f3bf 8f4f 	dsb	sy
 800175a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800175e:	f001 f941 	bl	80029e4 <vPortExitCritical>

    return xAlreadyYielded;
 8001762:	68bb      	ldr	r3, [r7, #8]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000170 	.word	0x20000170
 8001770:	20000148 	.word	0x20000148
 8001774:	20000108 	.word	0x20000108
 8001778:	20000150 	.word	0x20000150
 800177c:	20000074 	.word	0x20000074
 8001780:	20000070 	.word	0x20000070
 8001784:	2000015c 	.word	0x2000015c
 8001788:	20000158 	.word	0x20000158
 800178c:	e000ed04 	.word	0xe000ed04

08001790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <xTaskGetTickCount+0x1c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000014c 	.word	0x2000014c

080017b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017ba:	4b50      	ldr	r3, [pc, #320]	; (80018fc <xTaskIncrementTick+0x14c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 8092 	bne.w	80018e8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80017c4:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <xTaskIncrementTick+0x150>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80017cc:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <xTaskIncrementTick+0x150>)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d120      	bne.n	800181a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80017d8:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <xTaskIncrementTick+0x154>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <xTaskIncrementTick+0x48>
        __asm volatile
 80017e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	603b      	str	r3, [r7, #0]
    }
 80017f4:	bf00      	nop
 80017f6:	e7fe      	b.n	80017f6 <xTaskIncrementTick+0x46>
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <xTaskIncrementTick+0x154>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <xTaskIncrementTick+0x158>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a40      	ldr	r2, [pc, #256]	; (8001904 <xTaskIncrementTick+0x154>)
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4a40      	ldr	r2, [pc, #256]	; (8001908 <xTaskIncrementTick+0x158>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <xTaskIncrementTick+0x15c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	4a3e      	ldr	r2, [pc, #248]	; (800190c <xTaskIncrementTick+0x15c>)
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	f000 fac7 	bl	8001da8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <xTaskIncrementTick+0x160>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d34c      	bcc.n	80018be <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <xTaskIncrementTick+0x154>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d104      	bne.n	8001838 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800182e:	4b38      	ldr	r3, [pc, #224]	; (8001910 <xTaskIncrementTick+0x160>)
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	601a      	str	r2, [r3, #0]
                    break;
 8001836:	e042      	b.n	80018be <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <xTaskIncrementTick+0x154>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d203      	bcs.n	8001858 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001850:	4a2f      	ldr	r2, [pc, #188]	; (8001910 <xTaskIncrementTick+0x160>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001856:	e032      	b.n	80018be <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3304      	adds	r3, #4
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe ff1d 	bl	800069c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3318      	adds	r3, #24
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe ff14 	bl	800069c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fcb4 	bl	80041e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2201      	movs	r2, #1
 8001882:	409a      	lsls	r2, r3
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <xTaskIncrementTick+0x164>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4313      	orrs	r3, r2
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <xTaskIncrementTick+0x164>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <xTaskIncrementTick+0x168>)
 800189c:	441a      	add	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3304      	adds	r3, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4610      	mov	r0, r2
 80018a6:	f7fe fe9c 	bl	80005e2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <xTaskIncrementTick+0x16c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3b5      	bcc.n	8001824 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018bc:	e7b2      	b.n	8001824 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <xTaskIncrementTick+0x16c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c4:	4914      	ldr	r1, [pc, #80]	; (8001918 <xTaskIncrementTick+0x168>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d901      	bls.n	80018da <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <xTaskIncrementTick+0x170>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e004      	b.n	80018f2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <xTaskIncrementTick+0x174>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <xTaskIncrementTick+0x174>)
 80018f0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80018f2:	697b      	ldr	r3, [r7, #20]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000170 	.word	0x20000170
 8001900:	2000014c 	.word	0x2000014c
 8001904:	20000100 	.word	0x20000100
 8001908:	20000104 	.word	0x20000104
 800190c:	20000160 	.word	0x20000160
 8001910:	20000168 	.word	0x20000168
 8001914:	20000150 	.word	0x20000150
 8001918:	20000074 	.word	0x20000074
 800191c:	20000070 	.word	0x20000070
 8001920:	2000015c 	.word	0x2000015c
 8001924:	20000158 	.word	0x20000158

08001928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <vTaskSwitchContext+0xbc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <vTaskSwitchContext+0xc0>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800193c:	e04d      	b.n	80019da <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <vTaskSwitchContext+0xc0>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <vTaskSwitchContext+0xc4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	f1c3 031f 	rsb	r3, r3, #31
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	4925      	ldr	r1, [pc, #148]	; (80019f0 <vTaskSwitchContext+0xc8>)
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10a      	bne.n	8001984 <vTaskSwitchContext+0x5c>
        __asm volatile
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	607b      	str	r3, [r7, #4]
    }
 8001980:	bf00      	nop
 8001982:	e7fe      	b.n	8001982 <vTaskSwitchContext+0x5a>
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <vTaskSwitchContext+0xc8>)
 8001990:	4413      	add	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	3308      	adds	r3, #8
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d104      	bne.n	80019b4 <vTaskSwitchContext+0x8c>
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <vTaskSwitchContext+0xcc>)
 80019bc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <vTaskSwitchContext+0xcc>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <vTaskSwitchContext+0xd0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d102      	bne.n	80019d0 <vTaskSwitchContext+0xa8>
 80019ca:	f002 fb6b 	bl	80040a4 <SEGGER_SYSVIEW_OnIdle>
}
 80019ce:	e004      	b.n	80019da <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <vTaskSwitchContext+0xcc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fbc3 	bl	8004160 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000170 	.word	0x20000170
 80019e8:	2000015c 	.word	0x2000015c
 80019ec:	20000150 	.word	0x20000150
 80019f0:	20000074 	.word	0x20000074
 80019f4:	20000070 	.word	0x20000070
 80019f8:	2000016c 	.word	0x2000016c

080019fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a10:	f383 8811 	msr	BASEPRI, r3
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	f3bf 8f4f 	dsb	sy
 8001a1c:	60fb      	str	r3, [r7, #12]
    }
 8001a1e:	bf00      	nop
 8001a20:	e7fe      	b.n	8001a20 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <vTaskPlaceOnEventList+0x44>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3318      	adds	r3, #24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fdfd 	bl	800062a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a30:	2101      	movs	r1, #1
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f000 fa72 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000070 	.word	0x20000070

08001a44 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10a      	bne.n	8001a6c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5a:	f383 8811 	msr	BASEPRI, r3
 8001a5e:	f3bf 8f6f 	isb	sy
 8001a62:	f3bf 8f4f 	dsb	sy
 8001a66:	617b      	str	r3, [r7, #20]
    }
 8001a68:	bf00      	nop
 8001a6a:	e7fe      	b.n	8001a6a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <vTaskPlaceOnEventListRestricted+0x58>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3318      	adds	r3, #24
 8001a72:	4619      	mov	r1, r3
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7fe fdb4 	bl	80005e2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001a86:	2024      	movs	r0, #36	; 0x24
 8001a88:	f001 fe32 	bl	80036f0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	68b8      	ldr	r0, [r7, #8]
 8001a90:	f000 fa44 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
    }
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000070 	.word	0x20000070

08001aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	60fb      	str	r3, [r7, #12]
    }
 8001ac8:	bf00      	nop
 8001aca:	e7fe      	b.n	8001aca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	3318      	adds	r3, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fde3 	bl	800069c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <xTaskRemoveFromEventList+0xb4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d120      	bne.n	8001b20 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fdda 	bl	800069c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fb7a 	bl	80041e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <xTaskRemoveFromEventList+0xb8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <xTaskRemoveFromEventList+0xb8>)
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <xTaskRemoveFromEventList+0xbc>)
 8001b10:	441a      	add	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	3304      	adds	r3, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f7fe fd62 	bl	80005e2 <vListInsertEnd>
 8001b1e:	e005      	b.n	8001b2c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	3318      	adds	r3, #24
 8001b24:	4619      	mov	r1, r3
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <xTaskRemoveFromEventList+0xc0>)
 8001b28:	f7fe fd5b 	bl	80005e2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <xTaskRemoveFromEventList+0xc4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d905      	bls.n	8001b46 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <xTaskRemoveFromEventList+0xc8>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e001      	b.n	8001b4a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001b4a:	697b      	ldr	r3, [r7, #20]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000170 	.word	0x20000170
 8001b58:	20000150 	.word	0x20000150
 8001b5c:	20000074 	.word	0x20000074
 8001b60:	20000108 	.word	0x20000108
 8001b64:	20000070 	.word	0x20000070
 8001b68:	2000015c 	.word	0x2000015c

08001b6c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <vTaskInternalSetTimeOutState+0x24>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <vTaskInternalSetTimeOutState+0x28>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	20000160 	.word	0x20000160
 8001b94:	2000014c 	.word	0x2000014c

08001b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bac:	f383 8811 	msr	BASEPRI, r3
 8001bb0:	f3bf 8f6f 	isb	sy
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	613b      	str	r3, [r7, #16]
    }
 8001bba:	bf00      	nop
 8001bbc:	e7fe      	b.n	8001bbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	60fb      	str	r3, [r7, #12]
    }
 8001bd6:	bf00      	nop
 8001bd8:	e7fe      	b.n	8001bd8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001bda:	f000 fed3 	bl	8002984 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <xTaskCheckForTimeOut+0xc4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d102      	bne.n	8001bfe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	e026      	b.n	8001c4c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <xTaskCheckForTimeOut+0xc8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d00a      	beq.n	8001c20 <xTaskCheckForTimeOut+0x88>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d305      	bcc.n	8001c20 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e015      	b.n	8001c4c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d20b      	bcs.n	8001c42 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	1ad2      	subs	r2, r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff98 	bl	8001b6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	e004      	b.n	8001c4c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001c4c:	f000 feca 	bl	80029e4 <vPortExitCritical>

    return xReturn;
 8001c50:	69fb      	ldr	r3, [r7, #28]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000014c 	.word	0x2000014c
 8001c60:	20000160 	.word	0x20000160

08001c64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <vTaskMissedYield+0x14>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	2000015c 	.word	0x2000015c

08001c7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c84:	f000 f852 	bl	8001d2c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <prvIdleTask+0x28>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d9f9      	bls.n	8001c84 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <prvIdleTask+0x2c>)
 8001c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001ca0:	e7f0      	b.n	8001c84 <prvIdleTask+0x8>
 8001ca2:	bf00      	nop
 8001ca4:	20000074 	.word	0x20000074
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e00c      	b.n	8001cd2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <prvInitialiseTaskLists+0x60>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc5e 	bl	8000588 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d9ef      	bls.n	8001cb8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <prvInitialiseTaskLists+0x64>)
 8001cda:	f7fe fc55 	bl	8000588 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <prvInitialiseTaskLists+0x68>)
 8001ce0:	f7fe fc52 	bl	8000588 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <prvInitialiseTaskLists+0x6c>)
 8001ce6:	f7fe fc4f 	bl	8000588 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <prvInitialiseTaskLists+0x70>)
 8001cec:	f7fe fc4c 	bl	8000588 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <prvInitialiseTaskLists+0x74>)
 8001cf2:	f7fe fc49 	bl	8000588 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <prvInitialiseTaskLists+0x78>)
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <prvInitialiseTaskLists+0x64>)
 8001cfa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <prvInitialiseTaskLists+0x7c>)
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <prvInitialiseTaskLists+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000074 	.word	0x20000074
 8001d10:	200000d8 	.word	0x200000d8
 8001d14:	200000ec 	.word	0x200000ec
 8001d18:	20000108 	.word	0x20000108
 8001d1c:	2000011c 	.word	0x2000011c
 8001d20:	20000134 	.word	0x20000134
 8001d24:	20000100 	.word	0x20000100
 8001d28:	20000104 	.word	0x20000104

08001d2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d32:	e019      	b.n	8001d68 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001d34:	f000 fe26 	bl	8002984 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <prvCheckTasksWaitingTermination+0x50>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fca9 	bl	800069c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <prvCheckTasksWaitingTermination+0x54>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <prvCheckTasksWaitingTermination+0x54>)
 8001d52:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <prvCheckTasksWaitingTermination+0x58>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <prvCheckTasksWaitingTermination+0x58>)
 8001d5c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001d5e:	f000 fe41 	bl	80029e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f810 	bl	8001d88 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <prvCheckTasksWaitingTermination+0x58>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e1      	bne.n	8001d34 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000011c 	.word	0x2000011c
 8001d80:	20000148 	.word	0x20000148
 8001d84:	20000130 	.word	0x20000130

08001d88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 f801 	bl	8002d9c <vPortFree>
                vPortFree( pxTCB );
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fffe 	bl	8002d9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <prvResetNextTaskUnblockTime+0x30>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <prvResetNextTaskUnblockTime+0x34>)
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001dbe:	e005      	b.n	8001dcc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <prvResetNextTaskUnblockTime+0x30>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <prvResetNextTaskUnblockTime+0x34>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000100 	.word	0x20000100
 8001ddc:	20000168 	.word	0x20000168

08001de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <xTaskGetSchedulerState+0x34>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001dee:	2301      	movs	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	e008      	b.n	8001e06 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <xTaskGetSchedulerState+0x38>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	e001      	b.n	8001e06 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001e06:	687b      	ldr	r3, [r7, #4]
    }
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	20000154 	.word	0x20000154
 8001e18:	20000170 	.word	0x20000170

08001e1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d068      	beq.n	8001f04 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001e32:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <xTaskPriorityDisinherit+0xf4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d00a      	beq.n	8001e52 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	60fb      	str	r3, [r7, #12]
    }
 8001e4e:	bf00      	nop
 8001e50:	e7fe      	b.n	8001e50 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	60bb      	str	r3, [r7, #8]
    }
 8001e6c:	bf00      	nop
 8001e6e:	e7fe      	b.n	8001e6e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d03e      	beq.n	8001f04 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d13a      	bne.n	8001f04 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	3304      	adds	r3, #4
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fc02 	bl	800069c <uxListRemove>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <xTaskPriorityDisinherit+0xf8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <xTaskPriorityDisinherit+0xf8>)
 8001eb2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	204a      	movs	r0, #74	; 0x4a
 8001eba:	f001 fc37 	bl	800372c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f1c3 0205 	rsb	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <xTaskPriorityDisinherit+0xf8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <xTaskPriorityDisinherit+0xf8>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <xTaskPriorityDisinherit+0xfc>)
 8001ef2:	441a      	add	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7fe fb71 	bl	80005e2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f04:	697b      	ldr	r3, [r7, #20]
    }
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000070 	.word	0x20000070
 8001f14:	20000150 	.word	0x20000150
 8001f18:	20000074 	.word	0x20000074

08001f1c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001f26:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3304      	adds	r3, #4
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fbb2 	bl	800069c <uxListRemove>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	2201      	movs	r2, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4013      	ands	r3, r2
 8001f52:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001f54:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d110      	bne.n	8001f80 <prvAddCurrentTaskToDelayedList+0x64>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	211b      	movs	r1, #27
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 f97c 	bl	8004268 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f70:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4820      	ldr	r0, [pc, #128]	; (8001ffc <prvAddCurrentTaskToDelayedList+0xe0>)
 8001f7a:	f7fe fb32 	bl	80005e2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001f7e:	e032      	b.n	8001fe6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d20f      	bcs.n	8001fb8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 f962 	bl	8004268 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7fe fb3a 	bl	800062a <vListInsert>
}
 8001fb6:	e016      	b.n	8001fe6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 f952 	bl	8004268 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f7fe fb2a 	bl	800062a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <prvAddCurrentTaskToDelayedList+0xec>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d202      	bcs.n	8001fe6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001fe0:	4a09      	ldr	r2, [pc, #36]	; (8002008 <prvAddCurrentTaskToDelayedList+0xec>)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6013      	str	r3, [r2, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000014c 	.word	0x2000014c
 8001ff4:	20000070 	.word	0x20000070
 8001ff8:	20000150 	.word	0x20000150
 8001ffc:	20000134 	.word	0x20000134
 8002000:	20000104 	.word	0x20000104
 8002004:	20000100 	.word	0x20000100
 8002008:	20000168 	.word	0x20000168

0800200c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002016:	f000 fad5 	bl	80025c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <xTimerCreateTimerTask+0x54>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <xTimerCreateTimerTask+0x58>)
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2302      	movs	r3, #2
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2300      	movs	r3, #0
 800202c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002030:	490d      	ldr	r1, [pc, #52]	; (8002068 <xTimerCreateTimerTask+0x5c>)
 8002032:	480e      	ldr	r0, [pc, #56]	; (800206c <xTimerCreateTimerTask+0x60>)
 8002034:	f7ff f8b6 	bl	80011a4 <xTaskCreate>
 8002038:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10a      	bne.n	8002056 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	603b      	str	r3, [r7, #0]
    }
 8002052:	bf00      	nop
 8002054:	e7fe      	b.n	8002054 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002056:	687b      	ldr	r3, [r7, #4]
    }
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200001a4 	.word	0x200001a4
 8002064:	200001a8 	.word	0x200001a8
 8002068:	08006460 	.word	0x08006460
 800206c:	080021a5 	.word	0x080021a5

08002070 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <xTimerGenericCommand+0x2e>
        __asm volatile
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	623b      	str	r3, [r7, #32]
    }
 800209a:	bf00      	nop
 800209c:	e7fe      	b.n	800209c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <xTimerGenericCommand+0x98>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d02a      	beq.n	80020fc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	dc18      	bgt.n	80020ea <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80020b8:	f7ff fe92 	bl	8001de0 <xTaskGetSchedulerState>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d109      	bne.n	80020d6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <xTimerGenericCommand+0x98>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f107 0114 	add.w	r1, r7, #20
 80020ca:	2300      	movs	r3, #0
 80020cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ce:	f7fe fbff 	bl	80008d0 <xQueueGenericSend>
 80020d2:	6278      	str	r0, [r7, #36]	; 0x24
 80020d4:	e012      	b.n	80020fc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <xTimerGenericCommand+0x98>)
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	f107 0114 	add.w	r1, r7, #20
 80020de:	2300      	movs	r3, #0
 80020e0:	2200      	movs	r2, #0
 80020e2:	f7fe fbf5 	bl	80008d0 <xQueueGenericSend>
 80020e6:	6278      	str	r0, [r7, #36]	; 0x24
 80020e8:	e008      	b.n	80020fc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <xTimerGenericCommand+0x98>)
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	f107 0114 	add.w	r1, r7, #20
 80020f2:	2300      	movs	r3, #0
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	f7fe fd11 	bl	8000b1c <xQueueGenericSendFromISR>
 80020fa:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80020fe:	4618      	mov	r0, r3
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200001a4 	.word	0x200001a4

0800210c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <prvProcessExpiredTimer+0x94>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3304      	adds	r3, #4
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fab9 	bl	800069c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d022      	beq.n	800217e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	18d1      	adds	r1, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f000 f8d1 	bl	80022ec <prvInsertTimerInActiveList>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01f      	beq.n	8002190 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002150:	2300      	movs	r3, #0
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	2100      	movs	r1, #0
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff88 	bl	8002070 <xTimerGenericCommand>
 8002160:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	60fb      	str	r3, [r7, #12]
    }
 800217a:	bf00      	nop
 800217c:	e7fe      	b.n	800217c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	b2da      	uxtb	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	6978      	ldr	r0, [r7, #20]
 8002196:	4798      	blx	r3
    }
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000019c 	.word	0x2000019c

080021a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f857 	bl	8002264 <prvGetNextExpireTime>
 80021b6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4619      	mov	r1, r3
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f803 	bl	80021c8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80021c2:	f000 f8d5 	bl	8002370 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80021c6:	e7f1      	b.n	80021ac <prvTimerTask+0x8>

080021c8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80021d2:	f7ff fa2f 	bl	8001634 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f866 	bl	80022ac <prvSampleTimeNow>
 80021e0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d130      	bne.n	800224a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <prvProcessTimerOrBlockTask+0x3c>
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d806      	bhi.n	8002204 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80021f6:	f7ff fa2b 	bl	8001650 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff85 	bl	800210c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002202:	e024      	b.n	800224e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <prvProcessTimerOrBlockTask+0x90>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <prvProcessTimerOrBlockTask+0x50>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <prvProcessTimerOrBlockTask+0x52>
 8002218:	2300      	movs	r3, #0
 800221a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <prvProcessTimerOrBlockTask+0x94>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f7fe ff87 	bl	800113c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800222e:	f7ff fa0f 	bl	8001650 <xTaskResumeAll>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <prvProcessTimerOrBlockTask+0x98>)
 800223a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	f3bf 8f6f 	isb	sy
    }
 8002248:	e001      	b.n	800224e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800224a:	f7ff fa01 	bl	8001650 <xTaskResumeAll>
    }
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200001a0 	.word	0x200001a0
 800225c:	200001a4 	.word	0x200001a4
 8002260:	e000ed04 	.word	0xe000ed04

08002264 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <prvGetNextExpireTime+0x44>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <prvGetNextExpireTime+0x16>
 8002276:	2201      	movs	r2, #1
 8002278:	e000      	b.n	800227c <prvGetNextExpireTime+0x18>
 800227a:	2200      	movs	r2, #0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <prvGetNextExpireTime+0x44>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e001      	b.n	8002298 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002298:	68fb      	ldr	r3, [r7, #12]
    }
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	2000019c 	.word	0x2000019c

080022ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80022b4:	f7ff fa6c 	bl	8001790 <xTaskGetTickCount>
 80022b8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <prvSampleTimeNow+0x3c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d205      	bcs.n	80022d0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80022c4:	f000 f91a 	bl	80024fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e002      	b.n	80022d6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <prvSampleTimeNow+0x3c>)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80022dc:	68fb      	ldr	r3, [r7, #12]
    }
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200001ac 	.word	0x200001ac

080022ec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d812      	bhi.n	8002338 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	1ad2      	subs	r2, r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	d302      	bcc.n	8002326 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002320:	2301      	movs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e01b      	b.n	800235e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <prvInsertTimerInActiveList+0x7c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3304      	adds	r3, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7fe f97a 	bl	800062a <vListInsert>
 8002336:	e012      	b.n	800235e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d206      	bcs.n	800234e <prvInsertTimerInActiveList+0x62>
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d302      	bcc.n	800234e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e007      	b.n	800235e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <prvInsertTimerInActiveList+0x80>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3304      	adds	r3, #4
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f7fe f966 	bl	800062a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800235e:	697b      	ldr	r3, [r7, #20]
    }
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200001a0 	.word	0x200001a0
 800236c:	2000019c 	.word	0x2000019c

08002370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002376:	e0ae      	b.n	80024d6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f2c0 80aa 	blt.w	80024d4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3304      	adds	r3, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f983 	bl	800069c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff87 	bl	80022ac <prvSampleTimeNow>
 800239e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b09      	cmp	r3, #9
 80023a4:	f200 8097 	bhi.w	80024d6 <prvProcessReceivedCommands+0x166>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <prvProcessReceivedCommands+0x40>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023d9 	.word	0x080023d9
 80023b4:	080023d9 	.word	0x080023d9
 80023b8:	080023d9 	.word	0x080023d9
 80023bc:	0800244d 	.word	0x0800244d
 80023c0:	08002461 	.word	0x08002461
 80023c4:	080024ab 	.word	0x080024ab
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023d9 	.word	0x080023d9
 80023d0:	0800244d 	.word	0x0800244d
 80023d4:	08002461 	.word	0x08002461
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	18d1      	adds	r1, r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f8:	f7ff ff78 	bl	80022ec <prvInsertTimerInActiveList>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d069      	beq.n	80024d6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002408:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d05e      	beq.n	80024d6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	441a      	add	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2300      	movs	r3, #0
 8002426:	2100      	movs	r1, #0
 8002428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800242a:	f7ff fe21 	bl	8002070 <xTimerGenericCommand>
 800242e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d14f      	bne.n	80024d6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	61bb      	str	r3, [r7, #24]
    }
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800245e:	e03a      	b.n	80024d6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b2da      	uxtb	r2, r3
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	617b      	str	r3, [r7, #20]
    }
 8002492:	bf00      	nop
 8002494:	e7fe      	b.n	8002494 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	18d1      	adds	r1, r2, r3
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024a4:	f7ff ff22 	bl	80022ec <prvInsertTimerInActiveList>
                        break;
 80024a8:	e015      	b.n	80024d6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80024b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ba:	f000 fc6f 	bl	8002d9c <vPortFree>
 80024be:	e00a      	b.n	80024d6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80024d2:	e000      	b.n	80024d6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80024d4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <prvProcessReceivedCommands+0x188>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f107 0108 	add.w	r1, r7, #8
 80024de:	2200      	movs	r2, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fbd9 	bl	8000c98 <xQueueReceive>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f47f af45 	bne.w	8002378 <prvProcessReceivedCommands+0x8>
        }
    }
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200001a4 	.word	0x200001a4

080024fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002502:	e048      	b.n	8002596 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <prvSwitchTimerLists+0xc0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <prvSwitchTimerLists+0xc0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3304      	adds	r3, #4
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f8bd 	bl	800069c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02e      	beq.n	8002596 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	429a      	cmp	r2, r3
 8002548:	d90e      	bls.n	8002568 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <prvSwitchTimerLists+0xc0>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3304      	adds	r3, #4
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f7fe f862 	bl	800062a <vListInsert>
 8002566:	e016      	b.n	8002596 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002568:	2300      	movs	r3, #0
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2300      	movs	r3, #0
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	2100      	movs	r1, #0
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fd7c 	bl	8002070 <xTimerGenericCommand>
 8002578:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	603b      	str	r3, [r7, #0]
    }
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <prvSwitchTimerLists+0xc0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1b1      	bne.n	8002504 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <prvSwitchTimerLists+0xc0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <prvSwitchTimerLists+0xc4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <prvSwitchTimerLists+0xc0>)
 80025ac:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <prvSwitchTimerLists+0xc4>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	6013      	str	r3, [r2, #0]
    }
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000019c 	.word	0x2000019c
 80025c0:	200001a0 	.word	0x200001a0

080025c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80025c8:	f000 f9dc 	bl	8002984 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <prvCheckForValidListAndQueue+0x54>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11d      	bne.n	8002610 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80025d4:	4811      	ldr	r0, [pc, #68]	; (800261c <prvCheckForValidListAndQueue+0x58>)
 80025d6:	f7fd ffd7 	bl	8000588 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80025da:	4811      	ldr	r0, [pc, #68]	; (8002620 <prvCheckForValidListAndQueue+0x5c>)
 80025dc:	f7fd ffd4 	bl	8000588 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <prvCheckForValidListAndQueue+0x60>)
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <prvCheckForValidListAndQueue+0x58>)
 80025e4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <prvCheckForValidListAndQueue+0x64>)
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <prvCheckForValidListAndQueue+0x5c>)
 80025ea:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80025ec:	2200      	movs	r2, #0
 80025ee:	210c      	movs	r1, #12
 80025f0:	200a      	movs	r0, #10
 80025f2:	f7fe f8e5 	bl	80007c0 <xQueueGenericCreate>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <prvCheckForValidListAndQueue+0x54>)
 80025fa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <prvCheckForValidListAndQueue+0x54>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <prvCheckForValidListAndQueue+0x54>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4908      	ldr	r1, [pc, #32]	; (800262c <prvCheckForValidListAndQueue+0x68>)
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fd64 	bl	80010d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002610:	f000 f9e8 	bl	80029e4 <vPortExitCritical>
    }
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200001a4 	.word	0x200001a4
 800261c:	20000174 	.word	0x20000174
 8002620:	20000188 	.word	0x20000188
 8002624:	2000019c 	.word	0x2000019c
 8002628:	200001a0 	.word	0x200001a0
 800262c:	08006468 	.word	0x08006468

08002630 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3b04      	subs	r3, #4
 8002640:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002648:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b04      	subs	r3, #4
 800264e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f023 0201 	bic.w	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b04      	subs	r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <pxPortInitialiseStack+0x64>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3b14      	subs	r3, #20
 800266a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3b04      	subs	r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f06f 0202 	mvn.w	r2, #2
 800267e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b20      	subs	r3, #32
 8002684:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	08002699 	.word	0x08002699

08002698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <prvTaskExitError+0x54>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026aa:	d00a      	beq.n	80026c2 <prvTaskExitError+0x2a>
        __asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	60fb      	str	r3, [r7, #12]
    }
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <prvTaskExitError+0x28>
        __asm volatile
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	60bb      	str	r3, [r7, #8]
    }
 80026d4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80026d6:	bf00      	nop
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0fc      	beq.n	80026d8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	20000004 	.word	0x20000004

080026f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <pxCurrentTCBConst2>)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	6808      	ldr	r0, [r1, #0]
 80026f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026fa:	f380 8809 	msr	PSP, r0
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f04f 0000 	mov.w	r0, #0
 8002706:	f380 8811 	msr	BASEPRI, r0
 800270a:	4770      	bx	lr
 800270c:	f3af 8000 	nop.w

08002710 <pxCurrentTCBConst2>:
 8002710:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop

08002718 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002718:	4808      	ldr	r0, [pc, #32]	; (800273c <prvPortStartFirstTask+0x24>)
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	6800      	ldr	r0, [r0, #0]
 800271e:	f380 8808 	msr	MSP, r0
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f380 8814 	msr	CONTROL, r0
 800272a:	b662      	cpsie	i
 800272c:	b661      	cpsie	f
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	df00      	svc	0
 8002738:	bf00      	nop
 800273a:	0000      	.short	0x0000
 800273c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop

08002744 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <xPortStartScheduler+0x120>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a46      	ldr	r2, [pc, #280]	; (8002868 <xPortStartScheduler+0x124>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d10a      	bne.n	800276a <xPortStartScheduler+0x26>
        __asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	613b      	str	r3, [r7, #16]
    }
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <xPortStartScheduler+0x120>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3f      	ldr	r2, [pc, #252]	; (800286c <xPortStartScheduler+0x128>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d10a      	bne.n	800278a <xPortStartScheduler+0x46>
        __asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	60fb      	str	r3, [r7, #12]
    }
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800278a:	4b39      	ldr	r3, [pc, #228]	; (8002870 <xPortStartScheduler+0x12c>)
 800278c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	22ff      	movs	r2, #255	; 0xff
 800279a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <xPortStartScheduler+0x130>)
 80027b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80027b2:	4b31      	ldr	r3, [pc, #196]	; (8002878 <xPortStartScheduler+0x134>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027b8:	e009      	b.n	80027ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80027ba:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <xPortStartScheduler+0x134>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3b01      	subs	r3, #1
 80027c0:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <xPortStartScheduler+0x134>)
 80027c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b80      	cmp	r3, #128	; 0x80
 80027d8:	d0ef      	beq.n	80027ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <xPortStartScheduler+0x134>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1c3 0307 	rsb	r3, r3, #7
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00a      	beq.n	80027fc <xPortStartScheduler+0xb8>
        __asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	60bb      	str	r3, [r7, #8]
    }
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <xPortStartScheduler+0x134>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <xPortStartScheduler+0x134>)
 8002804:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <xPortStartScheduler+0x134>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <xPortStartScheduler+0x134>)
 8002810:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <xPortStartScheduler+0x138>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <xPortStartScheduler+0x138>)
 8002820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002824:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <xPortStartScheduler+0x138>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a14      	ldr	r2, [pc, #80]	; (800287c <xPortStartScheduler+0x138>)
 800282c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002830:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002832:	f000 f963 	bl	8002afc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <xPortStartScheduler+0x13c>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800283c:	f000 f982 	bl	8002b44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <xPortStartScheduler+0x140>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <xPortStartScheduler+0x140>)
 8002846:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800284a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800284c:	f7ff ff64 	bl	8002718 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002850:	f7ff f86a 	bl	8001928 <vTaskSwitchContext>
    prvTaskExitError();
 8002854:	f7ff ff20 	bl	8002698 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	410fc271 	.word	0x410fc271
 800286c:	410fc270 	.word	0x410fc270
 8002870:	e000e400 	.word	0xe000e400
 8002874:	200001b0 	.word	0x200001b0
 8002878:	200001b4 	.word	0x200001b4
 800287c:	e000ed20 	.word	0xe000ed20
 8002880:	20000004 	.word	0x20000004
 8002884:	e000ef34 	.word	0xe000ef34

08002888 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <vInitPrioGroupValue+0xe4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a37      	ldr	r2, [pc, #220]	; (8002970 <vInitPrioGroupValue+0xe8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10a      	bne.n	80028ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	613b      	str	r3, [r7, #16]
    }
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <vInitPrioGroupValue+0xe4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <vInitPrioGroupValue+0xec>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d10a      	bne.n	80028ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	60fb      	str	r3, [r7, #12]
    }
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80028ce:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <vInitPrioGroupValue+0xf0>)
 80028d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <vInitPrioGroupValue+0xf4>)
 80028f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <vInitPrioGroupValue+0xf8>)
 80028f8:	2207      	movs	r2, #7
 80028fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028fc:	e009      	b.n	8002912 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <vInitPrioGroupValue+0xf8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <vInitPrioGroupValue+0xf8>)
 8002906:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	d0ef      	beq.n	80028fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <vInitPrioGroupValue+0xf8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	d00a      	beq.n	8002940 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	60bb      	str	r3, [r7, #8]
    }
 800293c:	bf00      	nop
 800293e:	e7fe      	b.n	800293e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <vInitPrioGroupValue+0xf8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <vInitPrioGroupValue+0xf8>)
 8002948:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <vInitPrioGroupValue+0xf8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <vInitPrioGroupValue+0xf8>)
 8002954:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	410fc271 	.word	0x410fc271
 8002974:	410fc270 	.word	0x410fc270
 8002978:	e000e400 	.word	0xe000e400
 800297c:	200001b0 	.word	0x200001b0
 8002980:	200001b4 	.word	0x200001b4

08002984 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
        __asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	607b      	str	r3, [r7, #4]
    }
 800299c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <vPortEnterCritical+0x58>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <vPortEnterCritical+0x58>)
 80029a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <vPortEnterCritical+0x58>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10f      	bne.n	80029d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <vPortEnterCritical+0x5c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	603b      	str	r3, [r7, #0]
    }
 80029cc:	bf00      	nop
 80029ce:	e7fe      	b.n	80029ce <vPortEnterCritical+0x4a>
    }
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	20000004 	.word	0x20000004
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <vPortExitCritical+0x50>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <vPortExitCritical+0x24>
        __asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	607b      	str	r3, [r7, #4]
    }
 8002a04:	bf00      	nop
 8002a06:	e7fe      	b.n	8002a06 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <vPortExitCritical+0x50>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <vPortExitCritical+0x50>)
 8002a10:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <vPortExitCritical+0x50>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <vPortExitCritical+0x42>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f383 8811 	msr	BASEPRI, r3
    }
 8002a24:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000004 	.word	0x20000004
	...

08002a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002a40:	f3ef 8009 	mrs	r0, PSP
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <pxCurrentTCBConst>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f01e 0f10 	tst.w	lr, #16
 8002a50:	bf08      	it	eq
 8002a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5a:	6010      	str	r0, [r2, #0]
 8002a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a64:	f380 8811 	msr	BASEPRI, r0
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f7fe ff5a 	bl	8001928 <vTaskSwitchContext>
 8002a74:	f04f 0000 	mov.w	r0, #0
 8002a78:	f380 8811 	msr	BASEPRI, r0
 8002a7c:	bc09      	pop	{r0, r3}
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	6808      	ldr	r0, [r1, #0]
 8002a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a86:	f01e 0f10 	tst.w	lr, #16
 8002a8a:	bf08      	it	eq
 8002a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a90:	f380 8809 	msr	PSP, r0
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	f3af 8000 	nop.w

08002aa0 <pxCurrentTCBConst>:
 8002aa0:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop

08002aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
        __asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	607b      	str	r3, [r7, #4]
    }
 8002ac0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002ac2:	f001 fa75 	bl	8003fb0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ac6:	f7fe fe73 	bl	80017b0 <xTaskIncrementTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ad0:	f001 facc 	bl	800406c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <SysTick_Handler+0x50>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e001      	b.n	8002ae2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002ade:	f001 faa9 	bl	8004034 <SEGGER_SYSVIEW_RecordExitISR>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f383 8811 	msr	BASEPRI, r3
    }
 8002aec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <vPortSetupTimerInterrupt+0x34>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <vPortSetupTimerInterrupt+0x38>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <vPortSetupTimerInterrupt+0x3c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <vPortSetupTimerInterrupt+0x40>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <vPortSetupTimerInterrupt+0x44>)
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <vPortSetupTimerInterrupt+0x34>)
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e010 	.word	0xe000e010
 8002b34:	e000e018 	.word	0xe000e018
 8002b38:	20000008 	.word	0x20000008
 8002b3c:	10624dd3 	.word	0x10624dd3
 8002b40:	e000e014 	.word	0xe000e014

08002b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002b54 <vPortEnableVFP+0x10>
 8002b48:	6801      	ldr	r1, [r0, #0]
 8002b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002b4e:	6001      	str	r1, [r0, #0]
 8002b50:	4770      	bx	lr
 8002b52:	0000      	.short	0x0000
 8002b54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop

08002b5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002b62:	f3ef 8305 	mrs	r3, IPSR
 8002b66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	d914      	bls.n	8002b98 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <vPortValidateInterruptPriority+0x70>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <vPortValidateInterruptPriority+0x74>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	7afa      	ldrb	r2, [r7, #11]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20a      	bcs.n	8002b98 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	607b      	str	r3, [r7, #4]
    }
 8002b94:	bf00      	nop
 8002b96:	e7fe      	b.n	8002b96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <vPortValidateInterruptPriority+0x78>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <vPortValidateInterruptPriority+0x7c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d90a      	bls.n	8002bbe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	603b      	str	r3, [r7, #0]
    }
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <vPortValidateInterruptPriority+0x60>
    }
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e3f0 	.word	0xe000e3f0
 8002bd0:	200001b0 	.word	0x200001b0
 8002bd4:	e000ed0c 	.word	0xe000ed0c
 8002bd8:	200001b4 	.word	0x200001b4

08002bdc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002be8:	f7fe fd24 	bl	8001634 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002bec:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <pvPortMalloc+0x1a8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002bf4:	f000 f934 	bl	8002e60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <pvPortMalloc+0x1ac>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 80a7 	bne.w	8002d54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d02d      	beq.n	8002c68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d227      	bcs.n	8002c68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002c18:	2208      	movs	r2, #8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d021      	beq.n	8002c6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f023 0307 	bic.w	r3, r3, #7
 8002c30:	3308      	adds	r3, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d214      	bcs.n	8002c62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f023 0307 	bic.w	r3, r3, #7
 8002c3e:	3308      	adds	r3, #8
 8002c40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <pvPortMalloc+0x92>
        __asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	617b      	str	r3, [r7, #20]
    }
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c66:	e002      	b.n	8002c6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	e000      	b.n	8002c70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d06e      	beq.n	8002d54 <pvPortMalloc+0x178>
 8002c76:	4b45      	ldr	r3, [pc, #276]	; (8002d8c <pvPortMalloc+0x1b0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d869      	bhi.n	8002d54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <pvPortMalloc+0x1b4>)
 8002c82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <pvPortMalloc+0x1b4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c8a:	e004      	b.n	8002c96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d903      	bls.n	8002ca8 <pvPortMalloc+0xcc>
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f1      	bne.n	8002c8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <pvPortMalloc+0x1a8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d050      	beq.n	8002d54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	4413      	add	r3, r2
 8002cba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	1ad2      	subs	r2, r2, r3
 8002ccc:	2308      	movs	r3, #8
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d91f      	bls.n	8002d14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <pvPortMalloc+0x120>
        __asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	613b      	str	r3, [r7, #16]
    }
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad2      	subs	r2, r2, r3
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d0e:	69b8      	ldr	r0, [r7, #24]
 8002d10:	f000 f908 	bl	8002f24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <pvPortMalloc+0x1b0>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <pvPortMalloc+0x1b0>)
 8002d20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <pvPortMalloc+0x1b0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <pvPortMalloc+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d203      	bcs.n	8002d36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <pvPortMalloc+0x1b0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <pvPortMalloc+0x1b8>)
 8002d34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <pvPortMalloc+0x1ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <pvPortMalloc+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <pvPortMalloc+0x1bc>)
 8002d52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002d54:	f7fe fc7c 	bl	8001650 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <pvPortMalloc+0x19c>
        __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	60fb      	str	r3, [r7, #12]
    }
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <pvPortMalloc+0x19a>
    return pvReturn;
 8002d78:	69fb      	ldr	r3, [r7, #28]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20012dc0 	.word	0x20012dc0
 8002d88:	20012dd4 	.word	0x20012dd4
 8002d8c:	20012dc4 	.word	0x20012dc4
 8002d90:	20012db8 	.word	0x20012db8
 8002d94:	20012dc8 	.word	0x20012dc8
 8002d98:	20012dcc 	.word	0x20012dcc

08002d9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d04d      	beq.n	8002e4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002dae:	2308      	movs	r3, #8
 8002db0:	425b      	negs	r3, r3
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4413      	add	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <vPortFree+0xb8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <vPortFree+0x44>
        __asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	60fb      	str	r3, [r7, #12]
    }
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <vPortFree+0x62>
        __asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	60bb      	str	r3, [r7, #8]
    }
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <vPortFree+0xb8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01e      	beq.n	8002e4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d11a      	bne.n	8002e4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <vPortFree+0xb8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002e24:	f7fe fc06 	bl	8001634 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <vPortFree+0xbc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <vPortFree+0xbc>)
 8002e34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e36:	6938      	ldr	r0, [r7, #16]
 8002e38:	f000 f874 	bl	8002f24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <vPortFree+0xc0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <vPortFree+0xc0>)
 8002e44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002e46:	f7fe fc03 	bl	8001650 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20012dd4 	.word	0x20012dd4
 8002e58:	20012dc4 	.word	0x20012dc4
 8002e5c:	20012dd0 	.word	0x20012dd0

08002e60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002e6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <prvHeapInit+0xac>)
 8002e6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3307      	adds	r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <prvHeapInit+0xac>)
 8002e90:	4413      	add	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <prvHeapInit+0xb0>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <prvHeapInit+0xb0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002eac:	2208      	movs	r2, #8
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <prvHeapInit+0xb4>)
 8002ec0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <prvHeapInit+0xb4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <prvHeapInit+0xb4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <prvHeapInit+0xb4>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <prvHeapInit+0xb8>)
 8002eee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <prvHeapInit+0xbc>)
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <prvHeapInit+0xc0>)
 8002efa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	200001b8 	.word	0x200001b8
 8002f10:	20012db8 	.word	0x20012db8
 8002f14:	20012dc0 	.word	0x20012dc0
 8002f18:	20012dc8 	.word	0x20012dc8
 8002f1c:	20012dc4 	.word	0x20012dc4
 8002f20:	20012dd4 	.word	0x20012dd4

08002f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <prvInsertBlockIntoFreeList+0xac>)
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e002      	b.n	8002f38 <prvInsertBlockIntoFreeList+0x14>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d8f7      	bhi.n	8002f32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d108      	bne.n	8002f66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	441a      	add	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	441a      	add	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d118      	bne.n	8002fac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d00d      	beq.n	8002fa2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e008      	b.n	8002fb4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e003      	b.n	8002fb4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d002      	beq.n	8002fc2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20012db8 	.word	0x20012db8
 8002fd4:	20012dc0 	.word	0x20012dc0

08002fd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002fe6:	2205      	movs	r2, #5
 8002fe8:	492b      	ldr	r1, [pc, #172]	; (8003098 <SYSVIEW_AddTask+0xc0>)
 8002fea:	68b8      	ldr	r0, [r7, #8]
 8002fec:	f003 fa02 	bl	80063f4 <memcmp>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d04b      	beq.n	800308e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <SYSVIEW_AddTask+0xc4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	d903      	bls.n	8003006 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002ffe:	4828      	ldr	r0, [pc, #160]	; (80030a0 <SYSVIEW_AddTask+0xc8>)
 8003000:	f001 fa7e 	bl	8004500 <SEGGER_SYSVIEW_Warn>
    return;
 8003004:	e044      	b.n	8003090 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003006:	4b25      	ldr	r3, [pc, #148]	; (800309c <SYSVIEW_AddTask+0xc4>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4926      	ldr	r1, [pc, #152]	; (80030a4 <SYSVIEW_AddTask+0xcc>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <SYSVIEW_AddTask+0xc4>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4921      	ldr	r1, [pc, #132]	; (80030a4 <SYSVIEW_AddTask+0xcc>)
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3304      	adds	r3, #4
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <SYSVIEW_AddTask+0xc4>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	491b      	ldr	r1, [pc, #108]	; (80030a4 <SYSVIEW_AddTask+0xcc>)
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3308      	adds	r3, #8
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <SYSVIEW_AddTask+0xc4>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4916      	ldr	r1, [pc, #88]	; (80030a4 <SYSVIEW_AddTask+0xcc>)
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	330c      	adds	r3, #12
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <SYSVIEW_AddTask+0xc4>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4910      	ldr	r1, [pc, #64]	; (80030a4 <SYSVIEW_AddTask+0xcc>)
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3310      	adds	r3, #16
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <SYSVIEW_AddTask+0xc4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <SYSVIEW_AddTask+0xc4>)
 800307a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f80e 	bl	80030a8 <SYSVIEW_SendTaskInfo>
 800308c:	e000      	b.n	8003090 <SYSVIEW_AddTask+0xb8>
    return;
 800308e:	bf00      	nop

}
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	08006470 	.word	0x08006470
 800309c:	20012e78 	.word	0x20012e78
 80030a0:	08006478 	.word	0x08006478
 80030a4:	20012dd8 	.word	0x20012dd8

080030a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	2214      	movs	r2, #20
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 f9b6 	bl	8006430 <memset>
  TaskInfo.TaskID     = TaskID;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fe3d 	bl	8003d5c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80030e2:	bf00      	nop
 80030e4:	3728      	adds	r7, #40	; 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <_DoInit+0x98>)
 80030f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2203      	movs	r2, #3
 80030fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2203      	movs	r2, #3
 8003100:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <_DoInit+0x9c>)
 8003106:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a20      	ldr	r2, [pc, #128]	; (800318c <_DoInit+0xa0>)
 800310c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003114:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <_DoInit+0x9c>)
 800312c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a17      	ldr	r2, [pc, #92]	; (8003190 <_DoInit+0xa4>)
 8003132:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2210      	movs	r2, #16
 8003138:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3307      	adds	r3, #7
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <_DoInit+0xa8>)
 8003152:	6810      	ldr	r0, [r2, #0]
 8003154:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003156:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <_DoInit+0xac>)
 800315e:	6810      	ldr	r0, [r2, #0]
 8003160:	6018      	str	r0, [r3, #0]
 8003162:	8891      	ldrh	r1, [r2, #4]
 8003164:	7992      	ldrb	r2, [r2, #6]
 8003166:	8099      	strh	r1, [r3, #4]
 8003168:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800316a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003174:	f3bf 8f5f 	dmb	sy
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	20012e7c 	.word	0x20012e7c
 8003188:	080064c8 	.word	0x080064c8
 800318c:	20012f24 	.word	0x20012f24
 8003190:	20013324 	.word	0x20013324
 8003194:	080064d4 	.word	0x080064d4
 8003198:	080064d8 	.word	0x080064d8

0800319c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80031a8:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <SEGGER_RTT_ReadNoLock+0x1e>
 80031b6:	f7ff ff99 	bl	80030ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	3360      	adds	r3, #96	; 0x60
 80031c6:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80031c8:	4413      	add	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80031dc:	2300      	movs	r3, #0
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d92b      	bls.n	8003240 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4293      	cmp	r3, r2
 80031f8:	bf28      	it	cs
 80031fa:	4613      	movcs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	4413      	add	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	6939      	ldr	r1, [r7, #16]
 800320c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800320e:	f003 f901 	bl	8006414 <memcpy>
    NumBytesRead += NumBytesRem;
 8003212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4413      	add	r3, r2
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4413      	add	r3, r2
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800322a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4413      	add	r3, r2
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003238:	429a      	cmp	r2, r3
 800323a:	d101      	bne.n	8003240 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4293      	cmp	r3, r2
 800324e:	bf28      	it	cs
 8003250:	4613      	movcs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d019      	beq.n	800328e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	4413      	add	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	6939      	ldr	r1, [r7, #16]
 8003268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800326a:	f003 f8d3 	bl	8006414 <memcpy>
    NumBytesRead += NumBytesRem;
 800326e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	4413      	add	r3, r2
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4413      	add	r3, r2
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	4413      	add	r3, r2
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003298:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800329c:	4618      	mov	r0, r3
 800329e:	3730      	adds	r7, #48	; 0x30
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20012e7c 	.word	0x20012e7c

080032a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80032b8:	e002      	b.n	80032c0 <_EncodeStr+0x18>
    Len++;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3301      	adds	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f6      	bne.n	80032ba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d901      	bls.n	80032d8 <_EncodeStr+0x30>
    Len = Limit;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2bfe      	cmp	r3, #254	; 0xfe
 80032dc:	d806      	bhi.n	80032ec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	60fa      	str	r2, [r7, #12]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e011      	b.n	8003310 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	60fa      	str	r2, [r7, #12]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	60fa      	str	r2, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	0a19      	lsrs	r1, r3, #8
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	b2ca      	uxtb	r2, r1
 800330e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003314:	e00a      	b.n	800332c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	1c53      	adds	r3, r2, #1
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1c59      	adds	r1, r3, #1
 8003320:	60f9      	str	r1, [r7, #12]
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	701a      	strb	r2, [r3, #0]
    n++;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3301      	adds	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d3f0      	bcc.n	8003316 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003334:	68fb      	ldr	r3, [r7, #12]
}
 8003336:	4618      	mov	r0, r3
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003362:	4b36      	ldr	r3, [pc, #216]	; (800343c <_HandleIncomingPacket+0xe0>)
 8003364:	7e1b      	ldrb	r3, [r3, #24]
 8003366:	4618      	mov	r0, r3
 8003368:	1cfb      	adds	r3, r7, #3
 800336a:	2201      	movs	r2, #1
 800336c:	4619      	mov	r1, r3
 800336e:	f7ff ff15 	bl	800319c <SEGGER_RTT_ReadNoLock>
 8003372:	4603      	mov	r3, r0
 8003374:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	dd54      	ble.n	8003426 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d032      	beq.n	80033e8 <_HandleIncomingPacket+0x8c>
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	dc42      	bgt.n	800340c <_HandleIncomingPacket+0xb0>
 8003386:	2b07      	cmp	r3, #7
 8003388:	dc16      	bgt.n	80033b8 <_HandleIncomingPacket+0x5c>
 800338a:	2b00      	cmp	r3, #0
 800338c:	dd3e      	ble.n	800340c <_HandleIncomingPacket+0xb0>
 800338e:	3b01      	subs	r3, #1
 8003390:	2b06      	cmp	r3, #6
 8003392:	d83b      	bhi.n	800340c <_HandleIncomingPacket+0xb0>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <_HandleIncomingPacket+0x40>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033bf 	.word	0x080033bf
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	080033cb 	.word	0x080033cb
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033dd 	.word	0x080033dd
 80033b4:	080033e3 	.word	0x080033e3
 80033b8:	2b7f      	cmp	r3, #127	; 0x7f
 80033ba:	d036      	beq.n	800342a <_HandleIncomingPacket+0xce>
 80033bc:	e026      	b.n	800340c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80033be:	f000 fb53 	bl	8003a68 <SEGGER_SYSVIEW_Start>
      break;
 80033c2:	e037      	b.n	8003434 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80033c4:	f000 fc0a 	bl	8003bdc <SEGGER_SYSVIEW_Stop>
      break;
 80033c8:	e034      	b.n	8003434 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80033ca:	f000 fdbf 	bl	8003f4c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80033ce:	e031      	b.n	8003434 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80033d0:	f000 fda8 	bl	8003f24 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80033d4:	e02e      	b.n	8003434 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80033d6:	f000 fc27 	bl	8003c28 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80033da:	e02b      	b.n	8003434 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80033dc:	f001 f852 	bl	8004484 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80033e0:	e028      	b.n	8003434 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80033e2:	f001 f831 	bl	8004448 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80033e6:	e025      	b.n	8003434 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <_HandleIncomingPacket+0xe0>)
 80033ea:	7e1b      	ldrb	r3, [r3, #24]
 80033ec:	4618      	mov	r0, r3
 80033ee:	1cfb      	adds	r3, r7, #3
 80033f0:	2201      	movs	r2, #1
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7ff fed2 	bl	800319c <SEGGER_RTT_ReadNoLock>
 80033f8:	4603      	mov	r3, r0
 80033fa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dd15      	ble.n	800342e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 ff9f 	bl	8004348 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800340a:	e010      	b.n	800342e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	b25b      	sxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	da0e      	bge.n	8003432 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <_HandleIncomingPacket+0xe0>)
 8003416:	7e1b      	ldrb	r3, [r3, #24]
 8003418:	4618      	mov	r0, r3
 800341a:	1cfb      	adds	r3, r7, #3
 800341c:	2201      	movs	r2, #1
 800341e:	4619      	mov	r1, r3
 8003420:	f7ff febc 	bl	800319c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003424:	e005      	b.n	8003432 <_HandleIncomingPacket+0xd6>
    }
  }
 8003426:	bf00      	nop
 8003428:	e004      	b.n	8003434 <_HandleIncomingPacket+0xd8>
      break;
 800342a:	bf00      	nop
 800342c:	e002      	b.n	8003434 <_HandleIncomingPacket+0xd8>
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <_HandleIncomingPacket+0xd8>
      break;
 8003432:	bf00      	nop
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20013334 	.word	0x20013334

08003440 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003446:	2301      	movs	r3, #1
 8003448:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	3301      	adds	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <_TrySendOverflowPacket+0xdc>)
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
 800345a:	e00b      	b.n	8003474 <_TrySendOverflowPacket+0x34>
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	b2da      	uxtb	r2, r3
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	1c59      	adds	r1, r3, #1
 8003464:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	09db      	lsrs	r3, r3, #7
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	2b7f      	cmp	r3, #127	; 0x7f
 8003478:	d8f0      	bhi.n	800345c <_TrySendOverflowPacket+0x1c>
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <_TrySendOverflowPacket+0xe0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003490:	4b22      	ldr	r3, [pc, #136]	; (800351c <_TrySendOverflowPacket+0xdc>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	e00b      	b.n	80034bc <_TrySendOverflowPacket+0x7c>
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	6279      	str	r1, [r7, #36]	; 0x24
 80034ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	09db      	lsrs	r3, r3, #7
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2b7f      	cmp	r3, #127	; 0x7f
 80034c0:	d8f0      	bhi.n	80034a4 <_TrySendOverflowPacket+0x64>
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	627a      	str	r2, [r7, #36]	; 0x24
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <_TrySendOverflowPacket+0xdc>)
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	4618      	mov	r0, r3
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fc fe84 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80034e8:	4603      	mov	r3, r0
 80034ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <_TrySendOverflowPacket+0xdc>)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <_TrySendOverflowPacket+0xdc>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <_TrySendOverflowPacket+0xdc>)
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e004      	b.n	8003510 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <_TrySendOverflowPacket+0xdc>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	3301      	adds	r3, #1
 800350c:	4a03      	ldr	r2, [pc, #12]	; (800351c <_TrySendOverflowPacket+0xdc>)
 800350e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003510:	693b      	ldr	r3, [r7, #16]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3730      	adds	r7, #48	; 0x30
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20013334 	.word	0x20013334
 8003520:	e0001004 	.word	0xe0001004

08003524 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003530:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <_SendPacket+0x1c0>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d010      	beq.n	800355a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <_SendPacket+0x1c0>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a3 	beq.w	8003688 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003542:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <_SendPacket+0x1c0>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d109      	bne.n	800355e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800354a:	f7ff ff79 	bl	8003440 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800354e:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <_SendPacket+0x1c0>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	f040 809a 	bne.w	800368c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003558:	e001      	b.n	800355e <_SendPacket+0x3a>
    goto Send;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <_SendPacket+0x3c>
Send:
 800355e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b1f      	cmp	r3, #31
 8003564:	d809      	bhi.n	800357a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <_SendPacket+0x1c0>)
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	f040 808b 	bne.w	8003690 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b17      	cmp	r3, #23
 800357e:	d807      	bhi.n	8003590 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3b01      	subs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e03d      	b.n	800360c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b7f      	cmp	r3, #127	; 0x7f
 800359c:	d912      	bls.n	80035c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	09da      	lsrs	r2, r3, #7
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	3a01      	subs	r2, #1
 80035b6:	60fa      	str	r2, [r7, #12]
 80035b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e006      	b.n	80035d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b7f      	cmp	r3, #127	; 0x7f
 80035d6:	d912      	bls.n	80035fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	09da      	lsrs	r2, r3, #7
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	3a01      	subs	r2, #1
 80035f0:	60fa      	str	r2, [r7, #12]
 80035f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e006      	b.n	800360c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b01      	subs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <_SendPacket+0x1c4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <_SendPacket+0x1c0>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	e00b      	b.n	800363e <_SendPacket+0x11a>
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	1c59      	adds	r1, r3, #1
 800362e:	6279      	str	r1, [r7, #36]	; 0x24
 8003630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	09db      	lsrs	r3, r3, #7
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	2b7f      	cmp	r3, #127	; 0x7f
 8003642:	d8f0      	bhi.n	8003626 <_SendPacket+0x102>
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	627a      	str	r2, [r7, #36]	; 0x24
 800364a:	6a3a      	ldr	r2, [r7, #32]
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003654:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <_SendPacket+0x1c0>)
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	4618      	mov	r0, r3
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	461a      	mov	r2, r3
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	f7fc fdc4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003668:	4603      	mov	r3, r0
 800366a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <_SendPacket+0x1c0>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	60d3      	str	r3, [r2, #12]
 8003678:	e00b      	b.n	8003692 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <_SendPacket+0x1c0>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <_SendPacket+0x1c0>)
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e004      	b.n	8003692 <_SendPacket+0x16e>
    goto SendDone;
 8003688:	bf00      	nop
 800368a:	e002      	b.n	8003692 <_SendPacket+0x16e>
      goto SendDone;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <_SendPacket+0x16e>
      goto SendDone;
 8003690:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <_SendPacket+0x1c0>)
 8003694:	7e1b      	ldrb	r3, [r3, #24]
 8003696:	4619      	mov	r1, r3
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <_SendPacket+0x1c8>)
 800369a:	460b      	mov	r3, r1
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	440b      	add	r3, r1
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	336c      	adds	r3, #108	; 0x6c
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <_SendPacket+0x1c0>)
 80036aa:	7e1b      	ldrb	r3, [r3, #24]
 80036ac:	4618      	mov	r0, r3
 80036ae:	490f      	ldr	r1, [pc, #60]	; (80036ec <_SendPacket+0x1c8>)
 80036b0:	4603      	mov	r3, r0
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4403      	add	r3, r0
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	3370      	adds	r3, #112	; 0x70
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d00b      	beq.n	80036da <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <_SendPacket+0x1c0>)
 80036c4:	789b      	ldrb	r3, [r3, #2]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <_SendPacket+0x1c0>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80036d0:	f7ff fe44 	bl	800335c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <_SendPacket+0x1c0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80036da:	bf00      	nop
 80036dc:	3728      	adds	r7, #40	; 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20013334 	.word	0x20013334
 80036e8:	e0001004 	.word	0xe0001004
 80036ec:	20012e7c 	.word	0x20012e7c

080036f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80036f8:	f3ef 8311 	mrs	r3, BASEPRI
 80036fc:	f04f 0120 	mov.w	r1, #32
 8003700:	f381 8811 	msr	BASEPRI, r1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4808      	ldr	r0, [pc, #32]	; (8003728 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003708:	f7ff fe1b 	bl	8003342 <_PreparePacket>
 800370c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68b8      	ldr	r0, [r7, #8]
 8003714:	f7ff ff06 	bl	8003524 <_SendPacket>
  RECORD_END();
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f383 8811 	msr	BASEPRI, r3
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20013364 	.word	0x20013364

0800372c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003736:	f3ef 8311 	mrs	r3, BASEPRI
 800373a:	f04f 0120 	mov.w	r1, #32
 800373e:	f381 8811 	msr	BASEPRI, r1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	4816      	ldr	r0, [pc, #88]	; (80037a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003746:	f7ff fdfc 	bl	8003342 <_PreparePacket>
 800374a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	e00b      	b.n	8003772 <SEGGER_SYSVIEW_RecordU32+0x46>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	1c59      	adds	r1, r3, #1
 8003762:	61f9      	str	r1, [r7, #28]
 8003764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	09db      	lsrs	r3, r3, #7
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b7f      	cmp	r3, #127	; 0x7f
 8003776:	d8f0      	bhi.n	800375a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	61fa      	str	r2, [r7, #28]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	6938      	ldr	r0, [r7, #16]
 800378e:	f7ff fec9 	bl	8003524 <_SendPacket>
  RECORD_END();
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f383 8811 	msr	BASEPRI, r3
}
 8003798:	bf00      	nop
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20013364 	.word	0x20013364

080037a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80037b0:	f3ef 8311 	mrs	r3, BASEPRI
 80037b4:	f04f 0120 	mov.w	r1, #32
 80037b8:	f381 8811 	msr	BASEPRI, r1
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	4825      	ldr	r0, [pc, #148]	; (8003854 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80037c0:	f7ff fdbf 	bl	8003342 <_PreparePacket>
 80037c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d2:	e00b      	b.n	80037ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80037de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	09db      	lsrs	r3, r3, #7
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	2b7f      	cmp	r3, #127	; 0x7f
 80037f0:	d8f0      	bhi.n	80037d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	e00b      	b.n	8003824 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	6279      	str	r1, [r7, #36]	; 0x24
 8003816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	09db      	lsrs	r3, r3, #7
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2b7f      	cmp	r3, #127	; 0x7f
 8003828:	d8f0      	bhi.n	800380c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	627a      	str	r2, [r7, #36]	; 0x24
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	6979      	ldr	r1, [r7, #20]
 800383e:	69b8      	ldr	r0, [r7, #24]
 8003840:	f7ff fe70 	bl	8003524 <_SendPacket>
  RECORD_END();
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f383 8811 	msr	BASEPRI, r3
}
 800384a:	bf00      	nop
 800384c:	3730      	adds	r7, #48	; 0x30
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20013364 	.word	0x20013364

08003858 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b08e      	sub	sp, #56	; 0x38
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003866:	f3ef 8311 	mrs	r3, BASEPRI
 800386a:	f04f 0120 	mov.w	r1, #32
 800386e:	f381 8811 	msr	BASEPRI, r1
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	4832      	ldr	r0, [pc, #200]	; (8003940 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003876:	f7ff fd64 	bl	8003342 <_PreparePacket>
 800387a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	633b      	str	r3, [r7, #48]	; 0x30
 8003888:	e00b      	b.n	80038a2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	b2da      	uxtb	r2, r3
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	1c59      	adds	r1, r3, #1
 8003892:	6379      	str	r1, [r7, #52]	; 0x34
 8003894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	09db      	lsrs	r3, r3, #7
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	2b7f      	cmp	r3, #127	; 0x7f
 80038a6:	d8f0      	bhi.n	800388a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	637a      	str	r2, [r7, #52]	; 0x34
 80038ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c0:	e00b      	b.n	80038da <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	1c59      	adds	r1, r3, #1
 80038ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	09db      	lsrs	r3, r3, #7
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2b7f      	cmp	r3, #127	; 0x7f
 80038de:	d8f0      	bhi.n	80038c2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	e00b      	b.n	8003912 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	1c59      	adds	r1, r3, #1
 8003902:	6279      	str	r1, [r7, #36]	; 0x24
 8003904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	09db      	lsrs	r3, r3, #7
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	2b7f      	cmp	r3, #127	; 0x7f
 8003916:	d8f0      	bhi.n	80038fa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	627a      	str	r2, [r7, #36]	; 0x24
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	6979      	ldr	r1, [r7, #20]
 800392c:	69b8      	ldr	r0, [r7, #24]
 800392e:	f7ff fdf9 	bl	8003524 <_SendPacket>
  RECORD_END();
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f383 8811 	msr	BASEPRI, r3
}
 8003938:	bf00      	nop
 800393a:	3738      	adds	r7, #56	; 0x38
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20013364 	.word	0x20013364

08003944 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b090      	sub	sp, #64	; 0x40
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003952:	f3ef 8311 	mrs	r3, BASEPRI
 8003956:	f04f 0120 	mov.w	r1, #32
 800395a:	f381 8811 	msr	BASEPRI, r1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	4840      	ldr	r0, [pc, #256]	; (8003a64 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003962:	f7ff fcee 	bl	8003342 <_PreparePacket>
 8003966:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
 8003974:	e00b      	b.n	800398e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	b2da      	uxtb	r2, r3
 800397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397c:	1c59      	adds	r1, r3, #1
 800397e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	09db      	lsrs	r3, r3, #7
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	2b7f      	cmp	r3, #127	; 0x7f
 8003992:	d8f0      	bhi.n	8003976 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	63fa      	str	r2, [r7, #60]	; 0x3c
 800399a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
 80039ac:	e00b      	b.n	80039c6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b4:	1c59      	adds	r1, r3, #1
 80039b6:	6379      	str	r1, [r7, #52]	; 0x34
 80039b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	09db      	lsrs	r3, r3, #7
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	2b7f      	cmp	r3, #127	; 0x7f
 80039ca:	d8f0      	bhi.n	80039ae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	637a      	str	r2, [r7, #52]	; 0x34
 80039d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e4:	e00b      	b.n	80039fe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	1c59      	adds	r1, r3, #1
 80039ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	09db      	lsrs	r3, r3, #7
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b7f      	cmp	r3, #127	; 0x7f
 8003a02:	d8f0      	bhi.n	80039e6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	e00b      	b.n	8003a36 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1c59      	adds	r1, r3, #1
 8003a26:	6279      	str	r1, [r7, #36]	; 0x24
 8003a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	09db      	lsrs	r3, r3, #7
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3a:	d8f0      	bhi.n	8003a1e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	627a      	str	r2, [r7, #36]	; 0x24
 8003a42:	6a3a      	ldr	r2, [r7, #32]
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6979      	ldr	r1, [r7, #20]
 8003a50:	69b8      	ldr	r0, [r7, #24]
 8003a52:	f7ff fd67 	bl	8003524 <_SendPacket>
  RECORD_END();
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f383 8811 	msr	BASEPRI, r3
}
 8003a5c:	bf00      	nop
 8003a5e:	3740      	adds	r7, #64	; 0x40
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20013364 	.word	0x20013364

08003a68 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08c      	sub	sp, #48	; 0x30
 8003a6c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003a6e:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <SEGGER_SYSVIEW_Start+0x168>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003a74:	f3ef 8311 	mrs	r3, BASEPRI
 8003a78:	f04f 0120 	mov.w	r1, #32
 8003a7c:	f381 8811 	msr	BASEPRI, r1
 8003a80:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <SEGGER_SYSVIEW_Start+0x168>)
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	220a      	movs	r2, #10
 8003a88:	4952      	ldr	r1, [pc, #328]	; (8003bd4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fbb0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003a96:	200a      	movs	r0, #10
 8003a98:	f7ff fe2a 	bl	80036f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003aa0:	f04f 0120 	mov.w	r1, #32
 8003aa4:	f381 8811 	msr	BASEPRI, r1
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	484b      	ldr	r0, [pc, #300]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x170>)
 8003aac:	f7ff fc49 	bl	8003342 <_PreparePacket>
 8003ab0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aba:	4b45      	ldr	r3, [pc, #276]	; (8003bd0 <SEGGER_SYSVIEW_Start+0x168>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac0:	e00b      	b.n	8003ada <SEGGER_SYSVIEW_Start+0x72>
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	1c59      	adds	r1, r3, #1
 8003aca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	09db      	lsrs	r3, r3, #7
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ade:	d8f0      	bhi.n	8003ac2 <SEGGER_SYSVIEW_Start+0x5a>
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <SEGGER_SYSVIEW_Start+0x168>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	e00b      	b.n	8003b14 <SEGGER_SYSVIEW_Start+0xac>
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	1c59      	adds	r1, r3, #1
 8003b04:	6279      	str	r1, [r7, #36]	; 0x24
 8003b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	09db      	lsrs	r3, r3, #7
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b7f      	cmp	r3, #127	; 0x7f
 8003b18:	d8f0      	bhi.n	8003afc <SEGGER_SYSVIEW_Start+0x94>
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <SEGGER_SYSVIEW_Start+0x168>)
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e00b      	b.n	8003b4e <SEGGER_SYSVIEW_Start+0xe6>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	1c59      	adds	r1, r3, #1
 8003b3e:	61f9      	str	r1, [r7, #28]
 8003b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	09db      	lsrs	r3, r3, #7
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b7f      	cmp	r3, #127	; 0x7f
 8003b52:	d8f0      	bhi.n	8003b36 <SEGGER_SYSVIEW_Start+0xce>
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	61fa      	str	r2, [r7, #28]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e00b      	b.n	8003b86 <SEGGER_SYSVIEW_Start+0x11e>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	6179      	str	r1, [r7, #20]
 8003b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	09db      	lsrs	r3, r3, #7
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b7f      	cmp	r3, #127	; 0x7f
 8003b8a:	d8f0      	bhi.n	8003b6e <SEGGER_SYSVIEW_Start+0x106>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	617a      	str	r2, [r7, #20]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003b9c:	2218      	movs	r2, #24
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fcbf 	bl	8003524 <_SendPacket>
      RECORD_END();
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <SEGGER_SYSVIEW_Start+0x168>)
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <SEGGER_SYSVIEW_Start+0x168>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003bba:	f000 f9c7 	bl	8003f4c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003bbe:	f000 f9b1 	bl	8003f24 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003bc2:	f000 fc5f 	bl	8004484 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003bc6:	bf00      	nop
 8003bc8:	3730      	adds	r7, #48	; 0x30
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20013334 	.word	0x20013334
 8003bd4:	080064f0 	.word	0x080064f0
 8003bd8:	20013364 	.word	0x20013364

08003bdc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003be2:	f3ef 8311 	mrs	r3, BASEPRI
 8003be6:	f04f 0120 	mov.w	r1, #32
 8003bea:	f381 8811 	msr	BASEPRI, r1
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	480b      	ldr	r0, [pc, #44]	; (8003c20 <SEGGER_SYSVIEW_Stop+0x44>)
 8003bf2:	f7ff fba6 	bl	8003342 <_PreparePacket>
 8003bf6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <SEGGER_SYSVIEW_Stop+0x48>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c00:	220b      	movs	r2, #11
 8003c02:	6839      	ldr	r1, [r7, #0]
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f7ff fc8d 	bl	8003524 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f383 8811 	msr	BASEPRI, r3
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20013364 	.word	0x20013364
 8003c24:	20013334 	.word	0x20013334

08003c28 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08c      	sub	sp, #48	; 0x30
 8003c2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c32:	f04f 0120 	mov.w	r1, #32
 8003c36:	f381 8811 	msr	BASEPRI, r1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4845      	ldr	r0, [pc, #276]	; (8003d54 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003c3e:	f7ff fb80 	bl	8003342 <_PreparePacket>
 8003c42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c52:	e00b      	b.n	8003c6c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	09db      	lsrs	r3, r3, #7
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c70:	d8f0      	bhi.n	8003c54 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	623b      	str	r3, [r7, #32]
 8003c8c:	e00b      	b.n	8003ca6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1c59      	adds	r1, r3, #1
 8003c96:	6279      	str	r1, [r7, #36]	; 0x24
 8003c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	09db      	lsrs	r3, r3, #7
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8003caa:	d8f0      	bhi.n	8003c8e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	627a      	str	r2, [r7, #36]	; 0x24
 8003cb2:	6a3a      	ldr	r2, [r7, #32]
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	e00b      	b.n	8003ce0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	61f9      	str	r1, [r7, #28]
 8003cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	09db      	lsrs	r3, r3, #7
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ce4:	d8f0      	bhi.n	8003cc8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	61fa      	str	r2, [r7, #28]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e00b      	b.n	8003d18 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	6179      	str	r1, [r7, #20]
 8003d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	09db      	lsrs	r3, r3, #7
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d1c:	d8f0      	bhi.n	8003d00 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	617a      	str	r2, [r7, #20]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d2e:	2218      	movs	r2, #24
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	68b8      	ldr	r0, [r7, #8]
 8003d34:	f7ff fbf6 	bl	8003524 <_SendPacket>
  RECORD_END();
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	4798      	blx	r3
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3730      	adds	r7, #48	; 0x30
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20013364 	.word	0x20013364
 8003d58:	20013334 	.word	0x20013334

08003d5c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b092      	sub	sp, #72	; 0x48
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003d64:	f3ef 8311 	mrs	r3, BASEPRI
 8003d68:	f04f 0120 	mov.w	r1, #32
 8003d6c:	f381 8811 	msr	BASEPRI, r1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	486a      	ldr	r0, [pc, #424]	; (8003f1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003d74:	f7ff fae5 	bl	8003342 <_PreparePacket>
 8003d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b66      	ldr	r3, [pc, #408]	; (8003f20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8e:	e00b      	b.n	8003da8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	6479      	str	r1, [r7, #68]	; 0x44
 8003d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da4:	09db      	lsrs	r3, r3, #7
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
 8003da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003daa:	2b7f      	cmp	r3, #127	; 0x7f
 8003dac:	d8f0      	bhi.n	8003d90 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	647a      	str	r2, [r7, #68]	; 0x44
 8003db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc8:	e00b      	b.n	8003de2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	1c59      	adds	r1, r3, #1
 8003dd2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	09db      	lsrs	r3, r3, #7
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b7f      	cmp	r3, #127	; 0x7f
 8003de6:	d8f0      	bhi.n	8003dca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fa51 	bl	80032a8 <_EncodeStr>
 8003e06:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003e08:	2209      	movs	r2, #9
 8003e0a:	68f9      	ldr	r1, [r7, #12]
 8003e0c:	6938      	ldr	r0, [r7, #16]
 8003e0e:	f7ff fb89 	bl	8003524 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b40      	ldr	r3, [pc, #256]	; (8003f20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
 8003e26:	e00b      	b.n	8003e40 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2e:	1c59      	adds	r1, r3, #1
 8003e30:	6379      	str	r1, [r7, #52]	; 0x34
 8003e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	09db      	lsrs	r3, r3, #7
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	2b7f      	cmp	r3, #127	; 0x7f
 8003e44:	d8f0      	bhi.n	8003e28 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e60:	e00b      	b.n	8003e7a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	1c59      	adds	r1, r3, #1
 8003e6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	09db      	lsrs	r3, r3, #7
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7e:	d8f0      	bhi.n	8003e62 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	623b      	str	r3, [r7, #32]
 8003e9a:	e00b      	b.n	8003eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1c59      	adds	r1, r3, #1
 8003ea4:	6279      	str	r1, [r7, #36]	; 0x24
 8003ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	09db      	lsrs	r3, r3, #7
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb8:	d8f0      	bhi.n	8003e9c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8003ec0:	6a3a      	ldr	r2, [r7, #32]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e00b      	b.n	8003eec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	61f9      	str	r1, [r7, #28]
 8003ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	09db      	lsrs	r3, r3, #7
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef0:	d8f0      	bhi.n	8003ed4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	61fa      	str	r2, [r7, #28]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003f02:	2215      	movs	r2, #21
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	6938      	ldr	r0, [r7, #16]
 8003f08:	f7ff fb0c 	bl	8003524 <_SendPacket>
  RECORD_END();
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f383 8811 	msr	BASEPRI, r3
}
 8003f12:	bf00      	nop
 8003f14:	3748      	adds	r7, #72	; 0x48
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20013364 	.word	0x20013364
 8003f20:	20013334 	.word	0x20013334

08003f24 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003f3a:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4798      	blx	r3
  }
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20013334 	.word	0x20013334

08003f4c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01a      	beq.n	8003f90 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4798      	blx	r3
 8003f6c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003f70:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003f72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	000a      	movs	r2, r1
 8003f80:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003f82:	4613      	mov	r3, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	4621      	mov	r1, r4
 8003f88:	200d      	movs	r0, #13
 8003f8a:	f7ff fc0b 	bl	80037a4 <SEGGER_SYSVIEW_RecordU32x2>
 8003f8e:	e006      	b.n	8003f9e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	200c      	movs	r0, #12
 8003f98:	f7ff fbc8 	bl	800372c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20013334 	.word	0x20013334
 8003fac:	e0001004 	.word	0xe0001004

08003fb0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fba:	f04f 0120 	mov.w	r1, #32
 8003fbe:	f381 8811 	msr	BASEPRI, r1
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	4819      	ldr	r0, [pc, #100]	; (800402c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003fc6:	f7ff f9bc 	bl	8003342 <_PreparePacket>
 8003fca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e00b      	b.n	8003ffc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1c59      	adds	r1, r3, #1
 8003fec:	6179      	str	r1, [r7, #20]
 8003fee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	09db      	lsrs	r3, r3, #7
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8004000:	d8f0      	bhi.n	8003fe4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	617a      	str	r2, [r7, #20]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004012:	2202      	movs	r2, #2
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68b8      	ldr	r0, [r7, #8]
 8004018:	f7ff fa84 	bl	8003524 <_SendPacket>
  RECORD_END();
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f383 8811 	msr	BASEPRI, r3
}
 8004022:	bf00      	nop
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20013364 	.word	0x20013364
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800403a:	f3ef 8311 	mrs	r3, BASEPRI
 800403e:	f04f 0120 	mov.w	r1, #32
 8004042:	f381 8811 	msr	BASEPRI, r1
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	4807      	ldr	r0, [pc, #28]	; (8004068 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800404a:	f7ff f97a 	bl	8003342 <_PreparePacket>
 800404e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004050:	2203      	movs	r2, #3
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f7ff fa65 	bl	8003524 <_SendPacket>
  RECORD_END();
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f383 8811 	msr	BASEPRI, r3
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20013364 	.word	0x20013364

0800406c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004072:	f3ef 8311 	mrs	r3, BASEPRI
 8004076:	f04f 0120 	mov.w	r1, #32
 800407a:	f381 8811 	msr	BASEPRI, r1
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	4807      	ldr	r0, [pc, #28]	; (80040a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004082:	f7ff f95e 	bl	8003342 <_PreparePacket>
 8004086:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004088:	2212      	movs	r2, #18
 800408a:	6839      	ldr	r1, [r7, #0]
 800408c:	6838      	ldr	r0, [r7, #0]
 800408e:	f7ff fa49 	bl	8003524 <_SendPacket>
  RECORD_END();
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f383 8811 	msr	BASEPRI, r3
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20013364 	.word	0x20013364

080040a4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040aa:	f3ef 8311 	mrs	r3, BASEPRI
 80040ae:	f04f 0120 	mov.w	r1, #32
 80040b2:	f381 8811 	msr	BASEPRI, r1
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	4807      	ldr	r0, [pc, #28]	; (80040d8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80040ba:	f7ff f942 	bl	8003342 <_PreparePacket>
 80040be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80040c0:	2211      	movs	r2, #17
 80040c2:	6839      	ldr	r1, [r7, #0]
 80040c4:	6838      	ldr	r0, [r7, #0]
 80040c6:	f7ff fa2d 	bl	8003524 <_SendPacket>
  RECORD_END();
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f383 8811 	msr	BASEPRI, r3
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20013364 	.word	0x20013364

080040dc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040e4:	f3ef 8311 	mrs	r3, BASEPRI
 80040e8:	f04f 0120 	mov.w	r1, #32
 80040ec:	f381 8811 	msr	BASEPRI, r1
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	4819      	ldr	r0, [pc, #100]	; (8004158 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80040f4:	f7ff f925 	bl	8003342 <_PreparePacket>
 80040f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e00b      	b.n	800412a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	1c59      	adds	r1, r3, #1
 800411a:	61f9      	str	r1, [r7, #28]
 800411c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	09db      	lsrs	r3, r3, #7
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b7f      	cmp	r3, #127	; 0x7f
 800412e:	d8f0      	bhi.n	8004112 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	61fa      	str	r2, [r7, #28]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004140:	2208      	movs	r2, #8
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	6938      	ldr	r0, [r7, #16]
 8004146:	f7ff f9ed 	bl	8003524 <_SendPacket>
  RECORD_END();
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f383 8811 	msr	BASEPRI, r3
}
 8004150:	bf00      	nop
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20013364 	.word	0x20013364
 800415c:	20013334 	.word	0x20013334

08004160 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004168:	f3ef 8311 	mrs	r3, BASEPRI
 800416c:	f04f 0120 	mov.w	r1, #32
 8004170:	f381 8811 	msr	BASEPRI, r1
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	4819      	ldr	r0, [pc, #100]	; (80041dc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004178:	f7ff f8e3 	bl	8003342 <_PreparePacket>
 800417c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e00b      	b.n	80041ae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	1c59      	adds	r1, r3, #1
 800419e:	61f9      	str	r1, [r7, #28]
 80041a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	09db      	lsrs	r3, r3, #7
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b7f      	cmp	r3, #127	; 0x7f
 80041b2:	d8f0      	bhi.n	8004196 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80041c4:	2204      	movs	r2, #4
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	6938      	ldr	r0, [r7, #16]
 80041ca:	f7ff f9ab 	bl	8003524 <_SendPacket>
  RECORD_END();
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f383 8811 	msr	BASEPRI, r3
}
 80041d4:	bf00      	nop
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20013364 	.word	0x20013364
 80041e0:	20013334 	.word	0x20013334

080041e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041ec:	f3ef 8311 	mrs	r3, BASEPRI
 80041f0:	f04f 0120 	mov.w	r1, #32
 80041f4:	f381 8811 	msr	BASEPRI, r1
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	4819      	ldr	r0, [pc, #100]	; (8004260 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80041fc:	f7ff f8a1 	bl	8003342 <_PreparePacket>
 8004200:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004206:	4b17      	ldr	r3, [pc, #92]	; (8004264 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	e00b      	b.n	8004232 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	1c59      	adds	r1, r3, #1
 8004222:	61f9      	str	r1, [r7, #28]
 8004224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	09db      	lsrs	r3, r3, #7
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b7f      	cmp	r3, #127	; 0x7f
 8004236:	d8f0      	bhi.n	800421a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	61fa      	str	r2, [r7, #28]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004248:	2206      	movs	r2, #6
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	6938      	ldr	r0, [r7, #16]
 800424e:	f7ff f969 	bl	8003524 <_SendPacket>
  RECORD_END();
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f383 8811 	msr	BASEPRI, r3
}
 8004258:	bf00      	nop
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20013364 	.word	0x20013364
 8004264:	20013334 	.word	0x20013334

08004268 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004272:	f3ef 8311 	mrs	r3, BASEPRI
 8004276:	f04f 0120 	mov.w	r1, #32
 800427a:	f381 8811 	msr	BASEPRI, r1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	4827      	ldr	r0, [pc, #156]	; (8004320 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004282:	f7ff f85e 	bl	8003342 <_PreparePacket>
 8004286:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	e00b      	b.n	80042b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	1c59      	adds	r1, r3, #1
 80042a8:	6279      	str	r1, [r7, #36]	; 0x24
 80042aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	09db      	lsrs	r3, r3, #7
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b7f      	cmp	r3, #127	; 0x7f
 80042bc:	d8f0      	bhi.n	80042a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	627a      	str	r2, [r7, #36]	; 0x24
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	e00b      	b.n	80042f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	61f9      	str	r1, [r7, #28]
 80042e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	09db      	lsrs	r3, r3, #7
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b7f      	cmp	r3, #127	; 0x7f
 80042f4:	d8f0      	bhi.n	80042d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	61fa      	str	r2, [r7, #28]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004306:	2207      	movs	r2, #7
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	6938      	ldr	r0, [r7, #16]
 800430c:	f7ff f90a 	bl	8003524 <_SendPacket>
  RECORD_END();
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f383 8811 	msr	BASEPRI, r3
}
 8004316:	bf00      	nop
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20013364 	.word	0x20013364
 8004324:	20013334 	.word	0x20013334

08004328 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	1ad3      	subs	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20013334 	.word	0x20013334

08004348 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004352:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d06d      	beq.n	8004436 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
 8004364:	e008      	b.n	8004378 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	3301      	adds	r3, #1
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437c:	429a      	cmp	r2, r3
 800437e:	d3f2      	bcc.n	8004366 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004380:	e000      	b.n	8004384 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004382:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d055      	beq.n	8004436 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800438a:	f3ef 8311 	mrs	r3, BASEPRI
 800438e:	f04f 0120 	mov.w	r1, #32
 8004392:	f381 8811 	msr	BASEPRI, r1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	482a      	ldr	r0, [pc, #168]	; (8004444 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800439a:	f7fe ffd2 	bl	8003342 <_PreparePacket>
 800439e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	e00b      	b.n	80043c6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	1c59      	adds	r1, r3, #1
 80043b6:	6279      	str	r1, [r7, #36]	; 0x24
 80043b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	09db      	lsrs	r3, r3, #7
 80043c4:	623b      	str	r3, [r7, #32]
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2b7f      	cmp	r3, #127	; 0x7f
 80043ca:	d8f0      	bhi.n	80043ae <SEGGER_SYSVIEW_SendModule+0x66>
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	627a      	str	r2, [r7, #36]	; 0x24
 80043d2:	6a3a      	ldr	r2, [r7, #32]
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e00b      	b.n	8004400 <SEGGER_SYSVIEW_SendModule+0xb8>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	61f9      	str	r1, [r7, #28]
 80043f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	09db      	lsrs	r3, r3, #7
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b7f      	cmp	r3, #127	; 0x7f
 8004404:	d8f0      	bhi.n	80043e8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	61fa      	str	r2, [r7, #28]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2280      	movs	r2, #128	; 0x80
 800441c:	4619      	mov	r1, r3
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7fe ff42 	bl	80032a8 <_EncodeStr>
 8004424:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004426:	2216      	movs	r2, #22
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	6938      	ldr	r0, [r7, #16]
 800442c:	f7ff f87a 	bl	8003524 <_SendPacket>
      RECORD_END();
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004436:	bf00      	nop
 8004438:	3730      	adds	r7, #48	; 0x30
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2001335c 	.word	0x2001335c
 8004444:	20013364 	.word	0x20013364

08004448 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00f      	beq.n	8004476 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f2      	bne.n	800445c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2001335c 	.word	0x2001335c

08004484 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800448a:	f3ef 8311 	mrs	r3, BASEPRI
 800448e:	f04f 0120 	mov.w	r1, #32
 8004492:	f381 8811 	msr	BASEPRI, r1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	4817      	ldr	r0, [pc, #92]	; (80044f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800449a:	f7fe ff52 	bl	8003342 <_PreparePacket>
 800449e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	4b14      	ldr	r3, [pc, #80]	; (80044fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e00b      	b.n	80044c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	1c59      	adds	r1, r3, #1
 80044b8:	6179      	str	r1, [r7, #20]
 80044ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	09db      	lsrs	r3, r3, #7
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b7f      	cmp	r3, #127	; 0x7f
 80044cc:	d8f0      	bhi.n	80044b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	617a      	str	r2, [r7, #20]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80044de:	221b      	movs	r2, #27
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f7ff f81e 	bl	8003524 <_SendPacket>
  RECORD_END();
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f383 8811 	msr	BASEPRI, r3
}
 80044ee:	bf00      	nop
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20013364 	.word	0x20013364
 80044fc:	20013360 	.word	0x20013360

08004500 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004508:	f3ef 8311 	mrs	r3, BASEPRI
 800450c:	f04f 0120 	mov.w	r1, #32
 8004510:	f381 8811 	msr	BASEPRI, r1
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	4827      	ldr	r0, [pc, #156]	; (80045b4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004518:	f7fe ff13 	bl	8003342 <_PreparePacket>
 800451c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	6938      	ldr	r0, [r7, #16]
 8004524:	f7fe fec0 	bl	80032a8 <_EncodeStr>
 8004528:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	2301      	movs	r3, #1
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	e00b      	b.n	800454c <SEGGER_SYSVIEW_Warn+0x4c>
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	1c59      	adds	r1, r3, #1
 800453c:	6279      	str	r1, [r7, #36]	; 0x24
 800453e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	09db      	lsrs	r3, r3, #7
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	2b7f      	cmp	r3, #127	; 0x7f
 8004550:	d8f0      	bhi.n	8004534 <SEGGER_SYSVIEW_Warn+0x34>
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	627a      	str	r2, [r7, #36]	; 0x24
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e00b      	b.n	8004584 <SEGGER_SYSVIEW_Warn+0x84>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	1c59      	adds	r1, r3, #1
 8004574:	61f9      	str	r1, [r7, #28]
 8004576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	09db      	lsrs	r3, r3, #7
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b7f      	cmp	r3, #127	; 0x7f
 8004588:	d8f0      	bhi.n	800456c <SEGGER_SYSVIEW_Warn+0x6c>
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	61fa      	str	r2, [r7, #28]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800459a:	221a      	movs	r2, #26
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	6938      	ldr	r0, [r7, #16]
 80045a0:	f7fe ffc0 	bl	8003524 <_SendPacket>
  RECORD_END();
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f383 8811 	msr	BASEPRI, r3
}
 80045aa:	bf00      	nop
 80045ac:	3728      	adds	r7, #40	; 0x28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20013364 	.word	0x20013364

080045b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045be:	f000 fc8d 	bl	8004edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045c2:	f000 f853 	bl	800466c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045c6:	f000 f8bd 	bl	8004744 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <main+0x94>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1f      	ldr	r2, [pc, #124]	; (800464c <main+0x94>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start();

IsSuccess = xTaskCreate(GreenLed_Handler, "LED-1", 200, NULL, 2, &GreenLed_handle);
 80045d6:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <main+0x98>)
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	2302      	movs	r3, #2
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2300      	movs	r3, #0
 80045e0:	22c8      	movs	r2, #200	; 0xc8
 80045e2:	491c      	ldr	r1, [pc, #112]	; (8004654 <main+0x9c>)
 80045e4:	481c      	ldr	r0, [pc, #112]	; (8004658 <main+0xa0>)
 80045e6:	f7fc fddd 	bl	80011a4 <xTaskCreate>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a1b      	ldr	r2, [pc, #108]	; (800465c <main+0xa4>)
 80045ee:	6013      	str	r3, [r2, #0]
configASSERT(IsSuccess == pdPASS);
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <main+0xa4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d00a      	beq.n	800460e <main+0x56>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	607b      	str	r3, [r7, #4]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <main+0x54>

IsSuccess = xTaskCreate(RedLed_Handler, "LED-2", 200, NULL, 2, &RedLed_handle);
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <main+0xa8>)
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	2302      	movs	r3, #2
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	22c8      	movs	r2, #200	; 0xc8
 800461a:	4912      	ldr	r1, [pc, #72]	; (8004664 <main+0xac>)
 800461c:	4812      	ldr	r0, [pc, #72]	; (8004668 <main+0xb0>)
 800461e:	f7fc fdc1 	bl	80011a4 <xTaskCreate>
 8004622:	4603      	mov	r3, r0
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <main+0xa4>)
 8004626:	6013      	str	r3, [r2, #0]
configASSERT(IsSuccess == pdPASS);
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <main+0xa4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d00a      	beq.n	8004646 <main+0x8e>
        __asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	603b      	str	r3, [r7, #0]
    }
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <main+0x8c>

vTaskStartScheduler();
 8004646:	f7fc ff93 	bl	8001570 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800464a:	e7fe      	b.n	800464a <main+0x92>
 800464c:	e0001000 	.word	0xe0001000
 8004650:	2001344c 	.word	0x2001344c
 8004654:	080064e0 	.word	0x080064e0
 8004658:	08004c1d 	.word	0x08004c1d
 800465c:	20013448 	.word	0x20013448
 8004660:	20013450 	.word	0x20013450
 8004664:	080064e8 	.word	0x080064e8
 8004668:	08004c65 	.word	0x08004c65

0800466c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b094      	sub	sp, #80	; 0x50
 8004670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004672:	f107 0320 	add.w	r3, r7, #32
 8004676:	2230      	movs	r2, #48	; 0x30
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f001 fed8 	bl	8006430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	2300      	movs	r3, #0
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <SystemClock_Config+0xd0>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	4a28      	ldr	r2, [pc, #160]	; (800473c <SystemClock_Config+0xd0>)
 800469a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469e:	6413      	str	r3, [r2, #64]	; 0x40
 80046a0:	4b26      	ldr	r3, [pc, #152]	; (800473c <SystemClock_Config+0xd0>)
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80046ac:	2300      	movs	r3, #0
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <SystemClock_Config+0xd4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046b8:	4a21      	ldr	r2, [pc, #132]	; (8004740 <SystemClock_Config+0xd4>)
 80046ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <SystemClock_Config+0xd4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046cc:	2302      	movs	r3, #2
 80046ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046d0:	2301      	movs	r3, #1
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046d4:	2310      	movs	r3, #16
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046d8:	2302      	movs	r3, #2
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046dc:	2300      	movs	r3, #0
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80046e0:	2308      	movs	r3, #8
 80046e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80046e4:	2332      	movs	r3, #50	; 0x32
 80046e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80046e8:	2304      	movs	r3, #4
 80046ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80046ec:	2307      	movs	r3, #7
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046f0:	f107 0320 	add.w	r3, r7, #32
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fef5 	bl	80054e4 <HAL_RCC_OscConfig>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004700:	f000 fae6 	bl	8004cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004704:	230f      	movs	r3, #15
 8004706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004708:	2302      	movs	r3, #2
 800470a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004710:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800471a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f001 f956 	bl	80059d4 <HAL_RCC_ClockConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800472e:	f000 facf 	bl	8004cd0 <Error_Handler>
  }
}
 8004732:	bf00      	nop
 8004734:	3750      	adds	r7, #80	; 0x50
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800
 8004740:	40007000 	.word	0x40007000

08004744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08e      	sub	sp, #56	; 0x38
 8004748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	609a      	str	r2, [r3, #8]
 8004756:	60da      	str	r2, [r3, #12]
 8004758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	4bb2      	ldr	r3, [pc, #712]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	4ab1      	ldr	r2, [pc, #708]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	6313      	str	r3, [r2, #48]	; 0x30
 800476a:	4baf      	ldr	r3, [pc, #700]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	4bab      	ldr	r3, [pc, #684]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	4aaa      	ldr	r2, [pc, #680]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004780:	f043 0320 	orr.w	r3, r3, #32
 8004784:	6313      	str	r3, [r2, #48]	; 0x30
 8004786:	4ba8      	ldr	r3, [pc, #672]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	4ba4      	ldr	r3, [pc, #656]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	4aa3      	ldr	r2, [pc, #652]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	6313      	str	r3, [r2, #48]	; 0x30
 80047a2:	4ba1      	ldr	r3, [pc, #644]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	4b9d      	ldr	r3, [pc, #628]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	4a9c      	ldr	r2, [pc, #624]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6313      	str	r3, [r2, #48]	; 0x30
 80047be:	4b9a      	ldr	r3, [pc, #616]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	4b96      	ldr	r3, [pc, #600]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4a95      	ldr	r2, [pc, #596]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	6313      	str	r3, [r2, #48]	; 0x30
 80047da:	4b93      	ldr	r3, [pc, #588]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	4b8f      	ldr	r3, [pc, #572]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4a8e      	ldr	r2, [pc, #568]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f4:	6313      	str	r3, [r2, #48]	; 0x30
 80047f6:	4b8c      	ldr	r3, [pc, #560]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	4b88      	ldr	r3, [pc, #544]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	4a87      	ldr	r2, [pc, #540]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 800480c:	f043 0310 	orr.w	r3, r3, #16
 8004810:	6313      	str	r3, [r2, #48]	; 0x30
 8004812:	4b85      	ldr	r3, [pc, #532]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	4b81      	ldr	r3, [pc, #516]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	4a80      	ldr	r2, [pc, #512]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004828:	f043 0308 	orr.w	r3, r3, #8
 800482c:	6313      	str	r3, [r2, #48]	; 0x30
 800482e:	4b7e      	ldr	r3, [pc, #504]	; (8004a28 <MX_GPIO_Init+0x2e4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	607b      	str	r3, [r7, #4]
 8004838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800483a:	2200      	movs	r2, #0
 800483c:	2116      	movs	r1, #22
 800483e:	487b      	ldr	r0, [pc, #492]	; (8004a2c <MX_GPIO_Init+0x2e8>)
 8004840:	f000 fe1c 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8004844:	2200      	movs	r2, #0
 8004846:	2180      	movs	r1, #128	; 0x80
 8004848:	4879      	ldr	r0, [pc, #484]	; (8004a30 <MX_GPIO_Init+0x2ec>)
 800484a:	f000 fe17 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800484e:	2200      	movs	r2, #0
 8004850:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004854:	4877      	ldr	r0, [pc, #476]	; (8004a34 <MX_GPIO_Init+0x2f0>)
 8004856:	f000 fe11 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800485a:	2200      	movs	r2, #0
 800485c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004860:	4875      	ldr	r0, [pc, #468]	; (8004a38 <MX_GPIO_Init+0x2f4>)
 8004862:	f000 fe0b 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8004866:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	2302      	movs	r3, #2
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004870:	2300      	movs	r3, #0
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004874:	2303      	movs	r3, #3
 8004876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004878:	230c      	movs	r3, #12
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800487c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004880:	4619      	mov	r1, r3
 8004882:	486e      	ldr	r0, [pc, #440]	; (8004a3c <MX_GPIO_Init+0x2f8>)
 8004884:	f000 fc4e 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004888:	f44f 7360 	mov.w	r3, #896	; 0x380
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488e:	2302      	movs	r3, #2
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004892:	2300      	movs	r3, #0
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004896:	2300      	movs	r3, #0
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800489a:	2305      	movs	r3, #5
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800489e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a2:	4619      	mov	r1, r3
 80048a4:	4865      	ldr	r0, [pc, #404]	; (8004a3c <MX_GPIO_Init+0x2f8>)
 80048a6:	f000 fc3d 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80048aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b0:	2302      	movs	r3, #2
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b8:	2300      	movs	r3, #0
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80048bc:	230e      	movs	r3, #14
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80048c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c4:	4619      	mov	r1, r3
 80048c6:	485d      	ldr	r0, [pc, #372]	; (8004a3c <MX_GPIO_Init+0x2f8>)
 80048c8:	f000 fc2c 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80048cc:	2301      	movs	r3, #1
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d8:	2303      	movs	r3, #3
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048dc:	230c      	movs	r3, #12
 80048de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80048e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e4:	4619      	mov	r1, r3
 80048e6:	4851      	ldr	r0, [pc, #324]	; (8004a2c <MX_GPIO_Init+0x2e8>)
 80048e8:	f000 fc1c 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80048ec:	2316      	movs	r3, #22
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048f0:	2301      	movs	r3, #1
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f8:	2300      	movs	r3, #0
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004900:	4619      	mov	r1, r3
 8004902:	484a      	ldr	r0, [pc, #296]	; (8004a2c <MX_GPIO_Init+0x2e8>)
 8004904:	f000 fc0e 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8004908:	f248 0307 	movw	r3, #32775	; 0x8007
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800490e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004914:	2300      	movs	r3, #0
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800491c:	4619      	mov	r1, r3
 800491e:	4844      	ldr	r0, [pc, #272]	; (8004a30 <MX_GPIO_Init+0x2ec>)
 8004920:	f000 fc00 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004924:	f641 0358 	movw	r3, #6232	; 0x1858
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492a:	2302      	movs	r3, #2
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004932:	2300      	movs	r3, #0
 8004934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004936:	230e      	movs	r3, #14
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800493e:	4619      	mov	r1, r3
 8004940:	483b      	ldr	r0, [pc, #236]	; (8004a30 <MX_GPIO_Init+0x2ec>)
 8004942:	f000 fbef 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800494a:	2301      	movs	r3, #1
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	2300      	movs	r3, #0
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2300      	movs	r3, #0
 8004954:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800495a:	4619      	mov	r1, r3
 800495c:	4834      	ldr	r0, [pc, #208]	; (8004a30 <MX_GPIO_Init+0x2ec>)
 800495e:	f000 fbe1 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8004962:	2320      	movs	r3, #32
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004966:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004974:	4619      	mov	r1, r3
 8004976:	482d      	ldr	r0, [pc, #180]	; (8004a2c <MX_GPIO_Init+0x2e8>)
 8004978:	f000 fbd4 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800497c:	2303      	movs	r3, #3
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004980:	2302      	movs	r3, #2
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004988:	2300      	movs	r3, #0
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800498c:	2309      	movs	r3, #9
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004994:	4619      	mov	r1, r3
 8004996:	482a      	ldr	r0, [pc, #168]	; (8004a40 <MX_GPIO_Init+0x2fc>)
 8004998:	f000 fbc4 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800499c:	2304      	movs	r3, #4
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80049a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ac:	4619      	mov	r1, r3
 80049ae:	4824      	ldr	r0, [pc, #144]	; (8004a40 <MX_GPIO_Init+0x2fc>)
 80049b0:	f000 fbb8 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80049b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ba:	2302      	movs	r3, #2
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c2:	2303      	movs	r3, #3
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049c6:	230c      	movs	r3, #12
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ce:	4619      	mov	r1, r3
 80049d0:	4819      	ldr	r0, [pc, #100]	; (8004a38 <MX_GPIO_Init+0x2f4>)
 80049d2:	f000 fba7 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80049d6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e4:	2303      	movs	r3, #3
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049e8:	230c      	movs	r3, #12
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f0:	4619      	mov	r1, r3
 80049f2:	4814      	ldr	r0, [pc, #80]	; (8004a44 <MX_GPIO_Init+0x300>)
 80049f4:	f000 fb96 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80049f8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fe:	2302      	movs	r3, #2
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a06:	2300      	movs	r3, #0
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004a0a:	230e      	movs	r3, #14
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a12:	4619      	mov	r1, r3
 8004a14:	480a      	ldr	r0, [pc, #40]	; (8004a40 <MX_GPIO_Init+0x2fc>)
 8004a16:	f000 fb85 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8004a1a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a20:	2302      	movs	r3, #2
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a24:	e010      	b.n	8004a48 <MX_GPIO_Init+0x304>
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40020800 	.word	0x40020800
 8004a30:	40020000 	.word	0x40020000
 8004a34:	40020c00 	.word	0x40020c00
 8004a38:	40021800 	.word	0x40021800
 8004a3c:	40021400 	.word	0x40021400
 8004a40:	40020400 	.word	0x40020400
 8004a44:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8004a50:	230c      	movs	r3, #12
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a58:	4619      	mov	r1, r3
 8004a5a:	486b      	ldr	r0, [pc, #428]	; (8004c08 <MX_GPIO_Init+0x4c4>)
 8004a5c:	f000 fb62 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8004a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a66:	2300      	movs	r3, #0
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8004a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a72:	4619      	mov	r1, r3
 8004a74:	4864      	ldr	r0, [pc, #400]	; (8004c08 <MX_GPIO_Init+0x4c4>)
 8004a76:	f000 fb55 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8004a7a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a94:	4619      	mov	r1, r3
 8004a96:	485d      	ldr	r0, [pc, #372]	; (8004c0c <MX_GPIO_Init+0x4c8>)
 8004a98:	f000 fb44 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8004a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8004aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4856      	ldr	r0, [pc, #344]	; (8004c0c <MX_GPIO_Init+0x4c8>)
 8004ab2:	f000 fb37 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8004ab6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004abc:	2301      	movs	r3, #1
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004acc:	4619      	mov	r1, r3
 8004ace:	484f      	ldr	r0, [pc, #316]	; (8004c0c <MX_GPIO_Init+0x4c8>)
 8004ad0:	f000 fb28 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004ad4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ada:	2302      	movs	r3, #2
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ae6:	230e      	movs	r3, #14
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aee:	4619      	mov	r1, r3
 8004af0:	4847      	ldr	r0, [pc, #284]	; (8004c10 <MX_GPIO_Init+0x4cc>)
 8004af2:	f000 fb17 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8004af6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afc:	2302      	movs	r3, #2
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b04:	2300      	movs	r3, #0
 8004b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004b08:	230e      	movs	r3, #14
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b10:	4619      	mov	r1, r3
 8004b12:	4840      	ldr	r0, [pc, #256]	; (8004c14 <MX_GPIO_Init+0x4d0>)
 8004b14:	f000 fb06 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b1e:	2312      	movs	r3, #18
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b26:	2300      	movs	r3, #0
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b32:	4619      	mov	r1, r3
 8004b34:	4837      	ldr	r0, [pc, #220]	; (8004c14 <MX_GPIO_Init+0x4d0>)
 8004b36:	f000 faf5 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b40:	2312      	movs	r3, #18
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b54:	4619      	mov	r1, r3
 8004b56:	4830      	ldr	r0, [pc, #192]	; (8004c18 <MX_GPIO_Init+0x4d4>)
 8004b58:	f000 fae4 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004b5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b62:	2302      	movs	r3, #2
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b6e:	2307      	movs	r3, #7
 8004b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b76:	4619      	mov	r1, r3
 8004b78:	4827      	ldr	r0, [pc, #156]	; (8004c18 <MX_GPIO_Init+0x4d4>)
 8004b7a:	f000 fad3 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8004b7e:	2348      	movs	r3, #72	; 0x48
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b82:	2302      	movs	r3, #2
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004b8e:	230e      	movs	r3, #14
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b96:	4619      	mov	r1, r3
 8004b98:	481c      	ldr	r0, [pc, #112]	; (8004c0c <MX_GPIO_Init+0x4c8>)
 8004b9a:	f000 fac3 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004b9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bac:	2300      	movs	r3, #0
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004bb0:	2309      	movs	r3, #9
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4815      	ldr	r0, [pc, #84]	; (8004c10 <MX_GPIO_Init+0x4cc>)
 8004bbc:	f000 fab2 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8004bc0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	480d      	ldr	r0, [pc, #52]	; (8004c10 <MX_GPIO_Init+0x4cc>)
 8004bda:	f000 faa3 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8004bde:	2360      	movs	r3, #96	; 0x60
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be2:	2302      	movs	r3, #2
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bea:	2303      	movs	r3, #3
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004bee:	230c      	movs	r3, #12
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4803      	ldr	r0, [pc, #12]	; (8004c08 <MX_GPIO_Init+0x4c4>)
 8004bfa:	f000 fa93 	bl	8005124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004bfe:	bf00      	nop
 8004c00:	3738      	adds	r7, #56	; 0x38
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40020400 	.word	0x40020400
 8004c0c:	40020c00 	.word	0x40020c00
 8004c10:	40021800 	.word	0x40021800
 8004c14:	40020800 	.word	0x40020800
 8004c18:	40020000 	.word	0x40020000

08004c1c <GreenLed_Handler>:

/* USER CODE BEGIN 4 */
static void GreenLed_Handler(void *params)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	TickType_t InitialTime;
	const TickType_t Frequency = 1000;//milliseconds
 8004c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c28:	60fb      	str	r3, [r7, #12]
	InitialTime = xTaskGetTickCount();
 8004c2a:	f7fc fdb1 	bl	8001790 <xTaskGetTickCount>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8004c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c36:	4809      	ldr	r0, [pc, #36]	; (8004c5c <GreenLed_Handler+0x40>)
 8004c38:	f000 fc39 	bl	80054ae <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000)); This API should not be used if periodicity is needed.
		vTaskDelayUntil(&InitialTime,pdMS_TO_TICKS(Frequency));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	4a06      	ldr	r2, [pc, #24]	; (8004c60 <GreenLed_Handler+0x44>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	099a      	lsrs	r2, r3, #6
 8004c4e:	f107 0308 	add.w	r3, r7, #8
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc fc09 	bl	800146c <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8004c5a:	e7ea      	b.n	8004c32 <GreenLed_Handler+0x16>
 8004c5c:	40021800 	.word	0x40021800
 8004c60:	10624dd3 	.word	0x10624dd3

08004c64 <RedLed_Handler>:
	}
}

static void RedLed_Handler(void *params)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	TickType_t InitialTime;
	const TickType_t Frequency = 500;//milliseconds
 8004c6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c70:	60fb      	str	r3, [r7, #12]
	InitialTime = xTaskGetTickCount();
 8004c72:	f7fc fd8d 	bl	8001790 <xTaskGetTickCount>
 8004c76:	4603      	mov	r3, r0
 8004c78:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8004c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c7e:	4809      	ldr	r0, [pc, #36]	; (8004ca4 <RedLed_Handler+0x40>)
 8004c80:	f000 fc15 	bl	80054ae <HAL_GPIO_TogglePin>
		//HAL_Delay(500);
		//vTaskDelay(pdMS_TO_TICKS(500));
		vTaskDelayUntil(&InitialTime,pdMS_TO_TICKS(Frequency));//This is used for periodic tasks as it unblocks the
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <RedLed_Handler+0x44>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	099a      	lsrs	r2, r3, #6
 8004c96:	f107 0308 	add.w	r3, r7, #8
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fc fbe5 	bl	800146c <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8004ca2:	e7ea      	b.n	8004c7a <RedLed_Handler+0x16>
 8004ca4:	40021800 	.word	0x40021800
 8004ca8:	10624dd3 	.word	0x10624dd3

08004cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004cbe:	f000 f92f 	bl	8004f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40001000 	.word	0x40001000

08004cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd4:	b672      	cpsid	i
}
 8004cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cd8:	e7fe      	b.n	8004cd8 <Error_Handler+0x8>
	...

08004cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <HAL_MspInit+0x4c>)
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	4a0f      	ldr	r2, [pc, #60]	; (8004d28 <HAL_MspInit+0x4c>)
 8004cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <HAL_MspInit+0x4c>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_MspInit+0x4c>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <HAL_MspInit+0x4c>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_MspInit+0x4c>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8004d1a:	f7fd fdb5 	bl	8002888 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	; 0x38
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <HAL_InitTick+0xe4>)
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	4a32      	ldr	r2, [pc, #200]	; (8004e10 <HAL_InitTick+0xe4>)
 8004d46:	f043 0310 	orr.w	r3, r3, #16
 8004d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4c:	4b30      	ldr	r3, [pc, #192]	; (8004e10 <HAL_InitTick+0xe4>)
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d58:	f107 0210 	add.w	r2, r7, #16
 8004d5c:	f107 0314 	add.w	r3, r7, #20
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 f842 	bl	8005dec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004d72:	f001 f827 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8004d76:	6378      	str	r0, [r7, #52]	; 0x34
 8004d78:	e004      	b.n	8004d84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004d7a:	f001 f823 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	4a23      	ldr	r2, [pc, #140]	; (8004e14 <HAL_InitTick+0xe8>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	0c9b      	lsrs	r3, r3, #18
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004d92:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_InitTick+0xec>)
 8004d94:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <HAL_InitTick+0xf0>)
 8004d96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004d98:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_InitTick+0xec>)
 8004d9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_InitTick+0xec>)
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004da6:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <HAL_InitTick+0xec>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_InitTick+0xec>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004db2:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <HAL_InitTick+0xec>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004db8:	4817      	ldr	r0, [pc, #92]	; (8004e18 <HAL_InitTick+0xec>)
 8004dba:	f001 f849 	bl	8005e50 <HAL_TIM_Base_Init>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11b      	bne.n	8004e04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004dcc:	4812      	ldr	r0, [pc, #72]	; (8004e18 <HAL_InitTick+0xec>)
 8004dce:	f001 f899 	bl	8005f04 <HAL_TIM_Base_Start_IT>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d111      	bne.n	8004e04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004de0:	2036      	movs	r0, #54	; 0x36
 8004de2:	f000 f991 	bl	8005108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b0f      	cmp	r3, #15
 8004dea:	d808      	bhi.n	8004dfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004dec:	2200      	movs	r2, #0
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	2036      	movs	r0, #54	; 0x36
 8004df2:	f000 f96d 	bl	80050d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <HAL_InitTick+0xf4>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e002      	b.n	8004e04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3738      	adds	r7, #56	; 0x38
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	431bde83 	.word	0x431bde83
 8004e18:	20013454 	.word	0x20013454
 8004e1c:	40001000 	.word	0x40001000
 8004e20:	2000000c 	.word	0x2000000c

08004e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e28:	e7fe      	b.n	8004e28 <NMI_Handler+0x4>

08004e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e2e:	e7fe      	b.n	8004e2e <HardFault_Handler+0x4>

08004e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e34:	e7fe      	b.n	8004e34 <MemManage_Handler+0x4>

08004e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e3a:	e7fe      	b.n	8004e3a <BusFault_Handler+0x4>

08004e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e40:	e7fe      	b.n	8004e40 <UsageFault_Handler+0x4>

08004e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e54:	4802      	ldr	r0, [pc, #8]	; (8004e60 <TIM6_DAC_IRQHandler+0x10>)
 8004e56:	f001 f8c5 	bl	8005fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20013454 	.word	0x20013454

08004e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <SystemInit+0x20>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <SystemInit+0x20>)
 8004e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ec0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e8c:	480d      	ldr	r0, [pc, #52]	; (8004ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e8e:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e94:	e002      	b.n	8004e9c <LoopCopyDataInit>

08004e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e9a:	3304      	adds	r3, #4

08004e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ea0:	d3f9      	bcc.n	8004e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ea4:	4c0b      	ldr	r4, [pc, #44]	; (8004ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ea8:	e001      	b.n	8004eae <LoopFillZerobss>

08004eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004eac:	3204      	adds	r2, #4

08004eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004eb0:	d3fb      	bcc.n	8004eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004eb2:	f7ff ffd7 	bl	8004e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eb6:	f001 fa79 	bl	80063ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004eba:	f7ff fb7d 	bl	80045b8 <main>
  bx  lr    
 8004ebe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004ec0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ec8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004ecc:	08006524 	.word	0x08006524
  ldr r2, =_sbss
 8004ed0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8004ed4:	200134a0 	.word	0x200134a0

08004ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ed8:	e7fe      	b.n	8004ed8 <ADC_IRQHandler>
	...

08004edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <HAL_Init+0x40>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <HAL_Init+0x40>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_Init+0x40>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_Init+0x40>)
 8004ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <HAL_Init+0x40>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <HAL_Init+0x40>)
 8004efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f04:	2003      	movs	r0, #3
 8004f06:	f000 f8d8 	bl	80050ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7ff ff0e 	bl	8004d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f10:	f7ff fee4 	bl	8004cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40023c00 	.word	0x40023c00

08004f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_IncTick+0x20>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_IncTick+0x24>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <HAL_IncTick+0x24>)
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000010 	.word	0x20000010
 8004f44:	2001349c 	.word	0x2001349c

08004f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <HAL_GetTick+0x14>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2001349c 	.word	0x2001349c

08004f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f92:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	60d3      	str	r3, [r2, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000ed00 	.word	0xe000ed00

08004fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f003 0307 	and.w	r3, r3, #7
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db0b      	blt.n	8004fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	f003 021f 	and.w	r2, r3, #31
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <__NVIC_EnableIRQ+0x38>)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e100 	.word	0xe000e100

08005000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db0a      	blt.n	800502a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	490c      	ldr	r1, [pc, #48]	; (800504c <__NVIC_SetPriority+0x4c>)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	440b      	add	r3, r1
 8005024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005028:	e00a      	b.n	8005040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4908      	ldr	r1, [pc, #32]	; (8005050 <__NVIC_SetPriority+0x50>)
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	3b04      	subs	r3, #4
 8005038:	0112      	lsls	r2, r2, #4
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	440b      	add	r3, r1
 800503e:	761a      	strb	r2, [r3, #24]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000e100 	.word	0xe000e100
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f1c3 0307 	rsb	r3, r3, #7
 800506e:	2b04      	cmp	r3, #4
 8005070:	bf28      	it	cs
 8005072:	2304      	movcs	r3, #4
 8005074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3304      	adds	r3, #4
 800507a:	2b06      	cmp	r3, #6
 800507c:	d902      	bls.n	8005084 <NVIC_EncodePriority+0x30>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3b03      	subs	r3, #3
 8005082:	e000      	b.n	8005086 <NVIC_EncodePriority+0x32>
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	401a      	ands	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800509c:	f04f 31ff 	mov.w	r1, #4294967295
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	43d9      	mvns	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ac:	4313      	orrs	r3, r2
         );
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ff4c 	bl	8004f60 <__NVIC_SetPriorityGrouping>
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e2:	f7ff ff61 	bl	8004fa8 <__NVIC_GetPriorityGrouping>
 80050e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	6978      	ldr	r0, [r7, #20]
 80050ee:	f7ff ffb1 	bl	8005054 <NVIC_EncodePriority>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ff80 	bl	8005000 <__NVIC_SetPriority>
}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff54 	bl	8004fc4 <__NVIC_EnableIRQ>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	; 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e177      	b.n	8005430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005140:	2201      	movs	r2, #1
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4013      	ands	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	429a      	cmp	r2, r3
 800515a:	f040 8166 	bne.w	800542a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d005      	beq.n	8005176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005172:	2b02      	cmp	r3, #2
 8005174:	d130      	bne.n	80051d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2203      	movs	r2, #3
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051ac:	2201      	movs	r2, #1
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 0201 	and.w	r2, r3, #1
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d017      	beq.n	8005214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	2203      	movs	r2, #3
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d123      	bne.n	8005268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	08da      	lsrs	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3208      	adds	r2, #8
 8005228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	220f      	movs	r2, #15
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	08da      	lsrs	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3208      	adds	r2, #8
 8005262:	69b9      	ldr	r1, [r7, #24]
 8005264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	2203      	movs	r2, #3
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 0203 	and.w	r2, r3, #3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80c0 	beq.w	800542a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	4b66      	ldr	r3, [pc, #408]	; (8005448 <HAL_GPIO_Init+0x324>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	4a65      	ldr	r2, [pc, #404]	; (8005448 <HAL_GPIO_Init+0x324>)
 80052b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b8:	6453      	str	r3, [r2, #68]	; 0x44
 80052ba:	4b63      	ldr	r3, [pc, #396]	; (8005448 <HAL_GPIO_Init+0x324>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052c6:	4a61      	ldr	r2, [pc, #388]	; (800544c <HAL_GPIO_Init+0x328>)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	089b      	lsrs	r3, r3, #2
 80052cc:	3302      	adds	r3, #2
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	220f      	movs	r2, #15
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a58      	ldr	r2, [pc, #352]	; (8005450 <HAL_GPIO_Init+0x32c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d037      	beq.n	8005362 <HAL_GPIO_Init+0x23e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a57      	ldr	r2, [pc, #348]	; (8005454 <HAL_GPIO_Init+0x330>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_GPIO_Init+0x23a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a56      	ldr	r2, [pc, #344]	; (8005458 <HAL_GPIO_Init+0x334>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02b      	beq.n	800535a <HAL_GPIO_Init+0x236>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a55      	ldr	r2, [pc, #340]	; (800545c <HAL_GPIO_Init+0x338>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d025      	beq.n	8005356 <HAL_GPIO_Init+0x232>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a54      	ldr	r2, [pc, #336]	; (8005460 <HAL_GPIO_Init+0x33c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01f      	beq.n	8005352 <HAL_GPIO_Init+0x22e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a53      	ldr	r2, [pc, #332]	; (8005464 <HAL_GPIO_Init+0x340>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d019      	beq.n	800534e <HAL_GPIO_Init+0x22a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a52      	ldr	r2, [pc, #328]	; (8005468 <HAL_GPIO_Init+0x344>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_GPIO_Init+0x226>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a51      	ldr	r2, [pc, #324]	; (800546c <HAL_GPIO_Init+0x348>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00d      	beq.n	8005346 <HAL_GPIO_Init+0x222>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a50      	ldr	r2, [pc, #320]	; (8005470 <HAL_GPIO_Init+0x34c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d007      	beq.n	8005342 <HAL_GPIO_Init+0x21e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a4f      	ldr	r2, [pc, #316]	; (8005474 <HAL_GPIO_Init+0x350>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_GPIO_Init+0x21a>
 800533a:	2309      	movs	r3, #9
 800533c:	e012      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800533e:	230a      	movs	r3, #10
 8005340:	e010      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005342:	2308      	movs	r3, #8
 8005344:	e00e      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005346:	2307      	movs	r3, #7
 8005348:	e00c      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800534a:	2306      	movs	r3, #6
 800534c:	e00a      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800534e:	2305      	movs	r3, #5
 8005350:	e008      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005352:	2304      	movs	r3, #4
 8005354:	e006      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005356:	2303      	movs	r3, #3
 8005358:	e004      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800535a:	2302      	movs	r3, #2
 800535c:	e002      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005362:	2300      	movs	r3, #0
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	f002 0203 	and.w	r2, r2, #3
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	4093      	lsls	r3, r2
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005374:	4935      	ldr	r1, [pc, #212]	; (800544c <HAL_GPIO_Init+0x328>)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005382:	4b3d      	ldr	r3, [pc, #244]	; (8005478 <HAL_GPIO_Init+0x354>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053a6:	4a34      	ldr	r2, [pc, #208]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053d6:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053fa:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005400:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <HAL_GPIO_Init+0x354>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <HAL_GPIO_Init+0x354>)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	f67f ae84 	bls.w	8005140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	40013800 	.word	0x40013800
 8005450:	40020000 	.word	0x40020000
 8005454:	40020400 	.word	0x40020400
 8005458:	40020800 	.word	0x40020800
 800545c:	40020c00 	.word	0x40020c00
 8005460:	40021000 	.word	0x40021000
 8005464:	40021400 	.word	0x40021400
 8005468:	40021800 	.word	0x40021800
 800546c:	40021c00 	.word	0x40021c00
 8005470:	40022000 	.word	0x40022000
 8005474:	40022400 	.word	0x40022400
 8005478:	40013c00 	.word	0x40013c00

0800547c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
 8005488:	4613      	mov	r3, r2
 800548a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800548c:	787b      	ldrb	r3, [r7, #1]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005492:	887a      	ldrh	r2, [r7, #2]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005498:	e003      	b.n	80054a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	041a      	lsls	r2, r3, #16
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	619a      	str	r2, [r3, #24]
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054c0:	887a      	ldrh	r2, [r7, #2]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4013      	ands	r3, r2
 80054c6:	041a      	lsls	r2, r3, #16
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	43d9      	mvns	r1, r3
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	400b      	ands	r3, r1
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	619a      	str	r2, [r3, #24]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e267      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d075      	beq.n	80055ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005502:	4b88      	ldr	r3, [pc, #544]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b04      	cmp	r3, #4
 800550c:	d00c      	beq.n	8005528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550e:	4b85      	ldr	r3, [pc, #532]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005516:	2b08      	cmp	r3, #8
 8005518:	d112      	bne.n	8005540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551a:	4b82      	ldr	r3, [pc, #520]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005526:	d10b      	bne.n	8005540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005528:	4b7e      	ldr	r3, [pc, #504]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05b      	beq.n	80055ec <HAL_RCC_OscConfig+0x108>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d157      	bne.n	80055ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e242      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d106      	bne.n	8005558 <HAL_RCC_OscConfig+0x74>
 800554a:	4b76      	ldr	r3, [pc, #472]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a75      	ldr	r2, [pc, #468]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e01d      	b.n	8005594 <HAL_RCC_OscConfig+0xb0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x98>
 8005562:	4b70      	ldr	r3, [pc, #448]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6f      	ldr	r2, [pc, #444]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b6d      	ldr	r3, [pc, #436]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a6c      	ldr	r2, [pc, #432]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0xb0>
 800557c:	4b69      	ldr	r3, [pc, #420]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a68      	ldr	r2, [pc, #416]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	4b66      	ldr	r3, [pc, #408]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a65      	ldr	r2, [pc, #404]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800558e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7ff fcd4 	bl	8004f48 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a4:	f7ff fcd0 	bl	8004f48 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e207      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b6:	4b5b      	ldr	r3, [pc, #364]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0xc0>
 80055c2:	e014      	b.n	80055ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7ff fcc0 	bl	8004f48 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055cc:	f7ff fcbc 	bl	8004f48 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e1f3      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055de:	4b51      	ldr	r3, [pc, #324]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0xe8>
 80055ea:	e000      	b.n	80055ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d063      	beq.n	80056c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005606:	4b47      	ldr	r3, [pc, #284]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800560e:	2b08      	cmp	r3, #8
 8005610:	d11c      	bne.n	800564c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005612:	4b44      	ldr	r3, [pc, #272]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d116      	bne.n	800564c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561e:	4b41      	ldr	r3, [pc, #260]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_RCC_OscConfig+0x152>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e1c7      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005636:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	4937      	ldr	r1, [pc, #220]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564a:	e03a      	b.n	80056c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d020      	beq.n	8005696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <HAL_RCC_OscConfig+0x244>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565a:	f7ff fc75 	bl	8004f48 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005662:	f7ff fc71 	bl	8004f48 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e1a8      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005674:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4925      	ldr	r1, [pc, #148]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005690:	4313      	orrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]
 8005694:	e015      	b.n	80056c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <HAL_RCC_OscConfig+0x244>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7ff fc54 	bl	8004f48 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a4:	f7ff fc50 	bl	8004f48 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e187      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b6:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d036      	beq.n	800573c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <HAL_RCC_OscConfig+0x248>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056dc:	f7ff fc34 	bl	8004f48 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e4:	f7ff fc30 	bl	8004f48 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e167      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80056f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0x200>
 8005702:	e01b      	b.n	800573c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005704:	4b09      	ldr	r3, [pc, #36]	; (800572c <HAL_RCC_OscConfig+0x248>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570a:	f7ff fc1d 	bl	8004f48 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005710:	e00e      	b.n	8005730 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005712:	f7ff fc19 	bl	8004f48 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d907      	bls.n	8005730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e150      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
 8005724:	40023800 	.word	0x40023800
 8005728:	42470000 	.word	0x42470000
 800572c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005730:	4b88      	ldr	r3, [pc, #544]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ea      	bne.n	8005712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8097 	beq.w	8005878 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574e:	4b81      	ldr	r3, [pc, #516]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10f      	bne.n	800577a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	4b7d      	ldr	r3, [pc, #500]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	4a7c      	ldr	r2, [pc, #496]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005768:	6413      	str	r3, [r2, #64]	; 0x40
 800576a:	4b7a      	ldr	r3, [pc, #488]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	60bb      	str	r3, [r7, #8]
 8005774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005776:	2301      	movs	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577a:	4b77      	ldr	r3, [pc, #476]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d118      	bne.n	80057b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005786:	4b74      	ldr	r3, [pc, #464]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a73      	ldr	r2, [pc, #460]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005792:	f7ff fbd9 	bl	8004f48 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579a:	f7ff fbd5 	bl	8004f48 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e10c      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	4b6a      	ldr	r3, [pc, #424]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d106      	bne.n	80057ce <HAL_RCC_OscConfig+0x2ea>
 80057c0:	4b64      	ldr	r3, [pc, #400]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	4a63      	ldr	r2, [pc, #396]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	6713      	str	r3, [r2, #112]	; 0x70
 80057cc:	e01c      	b.n	8005808 <HAL_RCC_OscConfig+0x324>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x30c>
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	4a5e      	ldr	r2, [pc, #376]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057dc:	f043 0304 	orr.w	r3, r3, #4
 80057e0:	6713      	str	r3, [r2, #112]	; 0x70
 80057e2:	4b5c      	ldr	r3, [pc, #368]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	4a5b      	ldr	r2, [pc, #364]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	6713      	str	r3, [r2, #112]	; 0x70
 80057ee:	e00b      	b.n	8005808 <HAL_RCC_OscConfig+0x324>
 80057f0:	4b58      	ldr	r3, [pc, #352]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	4a57      	ldr	r2, [pc, #348]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	6713      	str	r3, [r2, #112]	; 0x70
 80057fc:	4b55      	ldr	r3, [pc, #340]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	4a54      	ldr	r2, [pc, #336]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005802:	f023 0304 	bic.w	r3, r3, #4
 8005806:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7ff fb9a 	bl	8004f48 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005816:	e00a      	b.n	800582e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7ff fb96 	bl	8004f48 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e0cb      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582e:	4b49      	ldr	r3, [pc, #292]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ee      	beq.n	8005818 <HAL_RCC_OscConfig+0x334>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583c:	f7ff fb84 	bl	8004f48 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005842:	e00a      	b.n	800585a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005844:	f7ff fb80 	bl	8004f48 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0b5      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800585a:	4b3e      	ldr	r3, [pc, #248]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ee      	bne.n	8005844 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d105      	bne.n	8005878 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800586c:	4b39      	ldr	r3, [pc, #228]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	4a38      	ldr	r2, [pc, #224]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005876:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80a1 	beq.w	80059c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b08      	cmp	r3, #8
 800588c:	d05c      	beq.n	8005948 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d141      	bne.n	800591a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005896:	4b31      	ldr	r3, [pc, #196]	; (800595c <HAL_RCC_OscConfig+0x478>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7ff fb54 	bl	8004f48 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a4:	f7ff fb50 	bl	8004f48 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e087      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69da      	ldr	r2, [r3, #28]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	019b      	lsls	r3, r3, #6
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	3b01      	subs	r3, #1
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	061b      	lsls	r3, r3, #24
 80058e6:	491b      	ldr	r1, [pc, #108]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ec:	4b1b      	ldr	r3, [pc, #108]	; (800595c <HAL_RCC_OscConfig+0x478>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f2:	f7ff fb29 	bl	8004f48 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fa:	f7ff fb25 	bl	8004f48 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e05c      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x416>
 8005918:	e054      	b.n	80059c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_RCC_OscConfig+0x478>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7ff fb12 	bl	8004f48 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005928:	f7ff fb0e 	bl	8004f48 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e045      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x444>
 8005946:	e03d      	b.n	80059c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e038      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
 8005954:	40023800 	.word	0x40023800
 8005958:	40007000 	.word	0x40007000
 800595c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005960:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <HAL_RCC_OscConfig+0x4ec>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d028      	beq.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005978:	429a      	cmp	r2, r3
 800597a:	d121      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d11a      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005990:	4013      	ands	r3, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005998:	4293      	cmp	r3, r2
 800599a:	d111      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	3b01      	subs	r3, #1
 80059aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d107      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800

080059d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0cc      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059e8:	4b68      	ldr	r3, [pc, #416]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d90c      	bls.n	8005a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b65      	ldr	r3, [pc, #404]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fe:	4b63      	ldr	r3, [pc, #396]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0b8      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d020      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a28:	4b59      	ldr	r3, [pc, #356]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a58      	ldr	r2, [pc, #352]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a40:	4b53      	ldr	r3, [pc, #332]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a52      	ldr	r2, [pc, #328]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a4c:	4b50      	ldr	r3, [pc, #320]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	494d      	ldr	r1, [pc, #308]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d044      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d107      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a72:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d119      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e07f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d003      	beq.n	8005a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a92:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e06f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa2:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e067      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab2:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f023 0203 	bic.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4934      	ldr	r1, [pc, #208]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac4:	f7ff fa40 	bl	8004f48 <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005acc:	f7ff fa3c 	bl	8004f48 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e04f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 020c 	and.w	r2, r3, #12
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d1eb      	bne.n	8005acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d20c      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e032      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4916      	ldr	r1, [pc, #88]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	490e      	ldr	r1, [pc, #56]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b5a:	f000 f821 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	490a      	ldr	r1, [pc, #40]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6c:	5ccb      	ldrb	r3, [r1, r3]
 8005b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff f8d6 	bl	8004d2c <HAL_InitTick>

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023c00 	.word	0x40023c00
 8005b90:	40023800 	.word	0x40023800
 8005b94:	080064fc 	.word	0x080064fc
 8005b98:	20000008 	.word	0x20000008
 8005b9c:	2000000c 	.word	0x2000000c

08005ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba4:	b094      	sub	sp, #80	; 0x50
 8005ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	647b      	str	r3, [r7, #68]	; 0x44
 8005bac:	2300      	movs	r3, #0
 8005bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb8:	4b79      	ldr	r3, [pc, #484]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 030c 	and.w	r3, r3, #12
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d00d      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x40>
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	f200 80e1 	bhi.w	8005d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d003      	beq.n	8005bda <HAL_RCC_GetSysClockFreq+0x3a>
 8005bd2:	e0db      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bd4:	4b73      	ldr	r3, [pc, #460]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005bd8:	e0db      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bda:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bde:	e0d8      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be0:	4b6f      	ldr	r3, [pc, #444]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bea:	4b6d      	ldr	r3, [pc, #436]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d063      	beq.n	8005cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf6:	4b6a      	ldr	r3, [pc, #424]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	099b      	lsrs	r3, r3, #6
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c12:	4622      	mov	r2, r4
 8005c14:	462b      	mov	r3, r5
 8005c16:	f04f 0000 	mov.w	r0, #0
 8005c1a:	f04f 0100 	mov.w	r1, #0
 8005c1e:	0159      	lsls	r1, r3, #5
 8005c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c24:	0150      	lsls	r0, r2, #5
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	1a51      	subs	r1, r2, r1
 8005c2e:	6139      	str	r1, [r7, #16]
 8005c30:	4629      	mov	r1, r5
 8005c32:	eb63 0301 	sbc.w	r3, r3, r1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c44:	4659      	mov	r1, fp
 8005c46:	018b      	lsls	r3, r1, #6
 8005c48:	4651      	mov	r1, sl
 8005c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c4e:	4651      	mov	r1, sl
 8005c50:	018a      	lsls	r2, r1, #6
 8005c52:	4651      	mov	r1, sl
 8005c54:	ebb2 0801 	subs.w	r8, r2, r1
 8005c58:	4659      	mov	r1, fp
 8005c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c72:	4690      	mov	r8, r2
 8005c74:	4699      	mov	r9, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	eb18 0303 	adds.w	r3, r8, r3
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	462b      	mov	r3, r5
 8005c80:	eb49 0303 	adc.w	r3, r9, r3
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c92:	4629      	mov	r1, r5
 8005c94:	024b      	lsls	r3, r1, #9
 8005c96:	4621      	mov	r1, r4
 8005c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	024a      	lsls	r2, r1, #9
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cb0:	f7fa fae8 	bl	8000284 <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbc:	e058      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cbe:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	099b      	lsrs	r3, r3, #6
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	4611      	mov	r1, r2
 8005cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cce:	623b      	str	r3, [r7, #32]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	f04f 0000 	mov.w	r0, #0
 8005ce0:	f04f 0100 	mov.w	r1, #0
 8005ce4:	0159      	lsls	r1, r3, #5
 8005ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cea:	0150      	lsls	r0, r2, #5
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d10:	ebb2 040a 	subs.w	r4, r2, sl
 8005d14:	eb63 050b 	sbc.w	r5, r3, fp
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	00eb      	lsls	r3, r5, #3
 8005d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d26:	00e2      	lsls	r2, r4, #3
 8005d28:	4614      	mov	r4, r2
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	4643      	mov	r3, r8
 8005d2e:	18e3      	adds	r3, r4, r3
 8005d30:	603b      	str	r3, [r7, #0]
 8005d32:	464b      	mov	r3, r9
 8005d34:	eb45 0303 	adc.w	r3, r5, r3
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d46:	4629      	mov	r1, r5
 8005d48:	028b      	lsls	r3, r1, #10
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d50:	4621      	mov	r1, r4
 8005d52:	028a      	lsls	r2, r1, #10
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	61fa      	str	r2, [r7, #28]
 8005d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d64:	f7fa fa8e 	bl	8000284 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3750      	adds	r7, #80	; 0x50
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d9e:	bf00      	nop
 8005da0:	40023800 	.word	0x40023800
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200

08005dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000008 	.word	0x20000008

08005dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dc8:	f7ff fff0 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	0a9b      	lsrs	r3, r3, #10
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	4903      	ldr	r1, [pc, #12]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40023800 	.word	0x40023800
 8005de8:	0800650c 	.word	0x0800650c

08005dec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	220f      	movs	r2, #15
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0203 	and.w	r2, r3, #3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e14:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e20:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <HAL_RCC_GetClockConfig+0x5c>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	08db      	lsrs	r3, r3, #3
 8005e26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <HAL_RCC_GetClockConfig+0x60>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 020f 	and.w	r2, r3, #15
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	601a      	str	r2, [r3, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40023c00 	.word	0x40023c00

08005e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e041      	b.n	8005ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f839 	bl	8005eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f000 f9d8 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e04e      	b.n	8005fba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d01d      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1f      	ldr	r2, [pc, #124]	; (8005fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d111      	bne.n	8005fa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d010      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	e007      	b.n	8005fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40000400 	.word	0x40000400
 8005fd0:	40000800 	.word	0x40000800
 8005fd4:	40000c00 	.word	0x40000c00
 8005fd8:	40010400 	.word	0x40010400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40001800 	.word	0x40001800

08005fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d122      	bne.n	8006040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d11b      	bne.n	8006040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0202 	mvn.w	r2, #2
 8006010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8ee 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8e0 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8f1 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b04      	cmp	r3, #4
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0204 	mvn.w	r2, #4
 8006064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8c4 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f8b6 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f8c7 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d122      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d11b      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0208 	mvn.w	r2, #8
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2204      	movs	r2, #4
 80060be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f89a 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f88c 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f89d 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d122      	bne.n	800613c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b10      	cmp	r3, #16
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0210 	mvn.w	r2, #16
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2208      	movs	r2, #8
 8006112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f870 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f862 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f873 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10e      	bne.n	8006168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d107      	bne.n	8006168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0201 	mvn.w	r2, #1
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fe fda2 	bl	8004cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d10e      	bne.n	8006194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006180:	2b80      	cmp	r3, #128	; 0x80
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f902 	bl	8006398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d10e      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f838 	bl	8006230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d10e      	bne.n	80061ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d107      	bne.n	80061ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0220 	mvn.w	r2, #32
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8cc 	bl	8006384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a40      	ldr	r2, [pc, #256]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3d      	ldr	r2, [pc, #244]	; (800635c <TIM_Base_SetConfig+0x118>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3c      	ldr	r2, [pc, #240]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3b      	ldr	r2, [pc, #236]	; (8006364 <TIM_Base_SetConfig+0x120>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <TIM_Base_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d027      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <TIM_Base_SetConfig+0x118>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d023      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <TIM_Base_SetConfig+0x120>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <TIM_Base_SetConfig+0x124>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <TIM_Base_SetConfig+0x128>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a27      	ldr	r2, [pc, #156]	; (8006370 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <TIM_Base_SetConfig+0x130>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a25      	ldr	r2, [pc, #148]	; (8006378 <TIM_Base_SetConfig+0x134>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a24      	ldr	r2, [pc, #144]	; (800637c <TIM_Base_SetConfig+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a23      	ldr	r2, [pc, #140]	; (8006380 <TIM_Base_SetConfig+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d103      	bne.n	8006344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	615a      	str	r2, [r3, #20]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	40001800 	.word	0x40001800
 800637c:	40001c00 	.word	0x40001c00
 8006380:	40002000 	.word	0x40002000

08006384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <__libc_init_array>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	4d0d      	ldr	r5, [pc, #52]	; (80063e4 <__libc_init_array+0x38>)
 80063b0:	4c0d      	ldr	r4, [pc, #52]	; (80063e8 <__libc_init_array+0x3c>)
 80063b2:	1b64      	subs	r4, r4, r5
 80063b4:	10a4      	asrs	r4, r4, #2
 80063b6:	2600      	movs	r6, #0
 80063b8:	42a6      	cmp	r6, r4
 80063ba:	d109      	bne.n	80063d0 <__libc_init_array+0x24>
 80063bc:	4d0b      	ldr	r5, [pc, #44]	; (80063ec <__libc_init_array+0x40>)
 80063be:	4c0c      	ldr	r4, [pc, #48]	; (80063f0 <__libc_init_array+0x44>)
 80063c0:	f000 f83e 	bl	8006440 <_init>
 80063c4:	1b64      	subs	r4, r4, r5
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	2600      	movs	r6, #0
 80063ca:	42a6      	cmp	r6, r4
 80063cc:	d105      	bne.n	80063da <__libc_init_array+0x2e>
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d4:	4798      	blx	r3
 80063d6:	3601      	adds	r6, #1
 80063d8:	e7ee      	b.n	80063b8 <__libc_init_array+0xc>
 80063da:	f855 3b04 	ldr.w	r3, [r5], #4
 80063de:	4798      	blx	r3
 80063e0:	3601      	adds	r6, #1
 80063e2:	e7f2      	b.n	80063ca <__libc_init_array+0x1e>
 80063e4:	0800651c 	.word	0x0800651c
 80063e8:	0800651c 	.word	0x0800651c
 80063ec:	0800651c 	.word	0x0800651c
 80063f0:	08006520 	.word	0x08006520

080063f4 <memcmp>:
 80063f4:	b510      	push	{r4, lr}
 80063f6:	3901      	subs	r1, #1
 80063f8:	4402      	add	r2, r0
 80063fa:	4290      	cmp	r0, r2
 80063fc:	d101      	bne.n	8006402 <memcmp+0xe>
 80063fe:	2000      	movs	r0, #0
 8006400:	e005      	b.n	800640e <memcmp+0x1a>
 8006402:	7803      	ldrb	r3, [r0, #0]
 8006404:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006408:	42a3      	cmp	r3, r4
 800640a:	d001      	beq.n	8006410 <memcmp+0x1c>
 800640c:	1b18      	subs	r0, r3, r4
 800640e:	bd10      	pop	{r4, pc}
 8006410:	3001      	adds	r0, #1
 8006412:	e7f2      	b.n	80063fa <memcmp+0x6>

08006414 <memcpy>:
 8006414:	440a      	add	r2, r1
 8006416:	4291      	cmp	r1, r2
 8006418:	f100 33ff 	add.w	r3, r0, #4294967295
 800641c:	d100      	bne.n	8006420 <memcpy+0xc>
 800641e:	4770      	bx	lr
 8006420:	b510      	push	{r4, lr}
 8006422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800642a:	4291      	cmp	r1, r2
 800642c:	d1f9      	bne.n	8006422 <memcpy+0xe>
 800642e:	bd10      	pop	{r4, pc}

08006430 <memset>:
 8006430:	4402      	add	r2, r0
 8006432:	4603      	mov	r3, r0
 8006434:	4293      	cmp	r3, r2
 8006436:	d100      	bne.n	800643a <memset+0xa>
 8006438:	4770      	bx	lr
 800643a:	f803 1b01 	strb.w	r1, [r3], #1
 800643e:	e7f9      	b.n	8006434 <memset+0x4>

08006440 <_init>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	bf00      	nop
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr

0800644c <_fini>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr
